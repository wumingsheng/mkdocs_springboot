{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"autowired-2-list/","text":"Spring @Autowired \u6ce8\u5165\u5230List\u548cMap \u00b6 \u9700\u6c42 \u00b6 \u9700\u6c42 \u5bf9\u5546\u54c1\u8fdb\u884c\u4ef7\u683c\u8ba1\u7b97\uff0c\u8ba1\u7b97\u4ef7\u683c\u8bbe\u8ba1\u5230\u5230\u5143\u7d20\u662f\u4e0d\u56fa\u5b9a\u5230\u3002\u6709\u5230\u5546\u54c1\u6d89\u53ca\u5230\u4f18\u60e0\u5377\u6709\u5230\u5546\u54c1\u6d89\u53ca\u5230\u56e2\u8d2d\uff0c\u6709\u5230\u5546\u54c1\u5168\u90fd\u6d89\u53ca\u5230\u3002 \u6bcf\u4e00\u4e2a\u73af\u8282\u8ba1\u7b97\u5b8c\u6210\u4ee5\u540e\uff0c\u8981\u628a\u4ef7\u683c\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u73af\u8282\u63a5\u7740\u8ba1\u7b97\u3002 \u62bd\u8c61\u51fa\u4e00\u4e2a\u6a21\u578b\u5c31\u662f\u6d41\u6c34\u7ebfpipeline\uff0c\u4e00\u4e2a\u9636\u6bb5\u4e00\u4e2a\u9636\u6bb5\u5904\u7406\uff0c\u4e0a\u4e00\u4e2a\u9636\u6bb5\u5904\u7406\u5b8c\u6210\u4ee5\u540e\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u9636\u6bb5 Spring\u5b9e\u73b0pipeline \u00b6 \u5b9e\u73b0\u65b9\u5f0f Spring \u4f7f\u7528 @Autowired + @Order \u5b9e\u73b0\u540c\u4e00\u7c7b\u578b\u7684\u5b9e\u4f8b\u6ce8\u5165\u5230\u96c6\u5408\uff08List or Map\uff09 \u5b9a\u4e49\u7c7b\u578b\u63a5\u53e3 1 2 3 4 5 6 7 public interface PriceCommonProcessor { public Integer process ( Integer lastPrice ); } A\u9636\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import org.springframework.core.annotation.Order ; import org.springframework.stereotype.Component ; import lombok.extern.slf4j.Slf4j ; @Component @Order ( 1 ) @Slf4j public class A_Processor implements PriceCommonProcessor { @Override public Integer process ( Integer lastPrice ) { log . info ( \"A >>>> processor\" ); return lastPrice - 100 ; } } B\u9636\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import org.springframework.core.annotation.Order ; import org.springframework.stereotype.Component ; import lombok.extern.slf4j.Slf4j ; @Component @Order ( 2 ) @Slf4j public class B_Processor implements PriceCommonProcessor { @Override public Integer process ( Integer lastPrice ) { log . info ( \"B >>>> processor\" ); return lastPrice - 200 ; } } C\u9636\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import org.springframework.core.annotation.Order ; import org.springframework.stereotype.Component ; import lombok.extern.slf4j.Slf4j ; @Component @Order ( 3 ) @Slf4j public class C_Processor implements PriceCommonProcessor { @Override public Integer process ( Integer lastPrice ) { log . info ( \"C >>>> processor\" ); return lastPrice - 300 ; } } \u4f7f\u7528\u53ca\u6d4b\u8bd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import java.util.List ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RestController ; import com.example.demo.processor.PriceCommonProcessor ; @RestController public class TestController { @Autowired private List < PriceCommonProcessor > list ; @GetMapping ( \"dd\" ) public Integer getPrice ( Integer lastPrice ) { for ( PriceCommonProcessor processor : list ) { lastPrice = processor . process ( lastPrice ); } return lastPrice ; } } \u6267\u884c\u547d\u4ee4 $ curl 'localhost:8080/dd?lastPrice=1000' \u63a7\u5236\u53f0\u65e5\u5fd7\u8f93\u51fa A >>>> processor B >>>> processor C >>>> processor @Autowired \u53ef\u4ee5\u76f4\u63a5\u6ce8\u5165\u540c\u4e00type\u7684\u5b9e\u4f8b\u5230list\uff0c\u6ce8\u5165\u7684\u987a\u5e8f\u5c31\u662f\u88ab @Order \u6807\u8bb0\u5230\u987a\u5e8f\uff0c\u4ece\u800c\u5f62\u6210pipeline\u6a21\u578b \u4e0d\u4ec5\u53ef\u4ee5\u987a\u5e8f\u6ce8\u5165\u5230 List \uff0c \u8fd8\u53ef\u4ee5\u6ce8\u5165\u5230 Map 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import java.util.List ; import java.util.Map ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RestController ; import com.example.demo.processor.PriceCommonProcessor ; import lombok.extern.slf4j.Slf4j ; @RestController @Slf4j public class TestController { @Autowired private List < PriceCommonProcessor > list ; @Autowired private Map < String , PriceCommonProcessor > map ; @GetMapping ( \"dd\" ) public Integer getPrice ( Integer lastPrice ) { map . entrySet (). forEach ( e -> { log . info ( \"{}--->>{}\" , e . getKey (), e . getValue (). getClass (). getName () ); }); return 1 ; } } a_Processor\u2014>>com.example.demo.processor.A_Processor b_Processor\u2014>>com.example.demo.processor.B_Processor c_Processor\u2014>>com.example.demo.processor.C_Processor","title":"pipeline"},{"location":"autowired-2-list/#spring-autowired-listmap","text":"","title":"Spring @Autowired \u6ce8\u5165\u5230List\u548cMap"},{"location":"autowired-2-list/#_1","text":"\u9700\u6c42 \u5bf9\u5546\u54c1\u8fdb\u884c\u4ef7\u683c\u8ba1\u7b97\uff0c\u8ba1\u7b97\u4ef7\u683c\u8bbe\u8ba1\u5230\u5230\u5143\u7d20\u662f\u4e0d\u56fa\u5b9a\u5230\u3002\u6709\u5230\u5546\u54c1\u6d89\u53ca\u5230\u4f18\u60e0\u5377\u6709\u5230\u5546\u54c1\u6d89\u53ca\u5230\u56e2\u8d2d\uff0c\u6709\u5230\u5546\u54c1\u5168\u90fd\u6d89\u53ca\u5230\u3002 \u6bcf\u4e00\u4e2a\u73af\u8282\u8ba1\u7b97\u5b8c\u6210\u4ee5\u540e\uff0c\u8981\u628a\u4ef7\u683c\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u73af\u8282\u63a5\u7740\u8ba1\u7b97\u3002 \u62bd\u8c61\u51fa\u4e00\u4e2a\u6a21\u578b\u5c31\u662f\u6d41\u6c34\u7ebfpipeline\uff0c\u4e00\u4e2a\u9636\u6bb5\u4e00\u4e2a\u9636\u6bb5\u5904\u7406\uff0c\u4e0a\u4e00\u4e2a\u9636\u6bb5\u5904\u7406\u5b8c\u6210\u4ee5\u540e\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u9636\u6bb5","title":"\u9700\u6c42"},{"location":"autowired-2-list/#springpipeline","text":"\u5b9e\u73b0\u65b9\u5f0f Spring \u4f7f\u7528 @Autowired + @Order \u5b9e\u73b0\u540c\u4e00\u7c7b\u578b\u7684\u5b9e\u4f8b\u6ce8\u5165\u5230\u96c6\u5408\uff08List or Map\uff09 \u5b9a\u4e49\u7c7b\u578b\u63a5\u53e3 1 2 3 4 5 6 7 public interface PriceCommonProcessor { public Integer process ( Integer lastPrice ); } A\u9636\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import org.springframework.core.annotation.Order ; import org.springframework.stereotype.Component ; import lombok.extern.slf4j.Slf4j ; @Component @Order ( 1 ) @Slf4j public class A_Processor implements PriceCommonProcessor { @Override public Integer process ( Integer lastPrice ) { log . info ( \"A >>>> processor\" ); return lastPrice - 100 ; } } B\u9636\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import org.springframework.core.annotation.Order ; import org.springframework.stereotype.Component ; import lombok.extern.slf4j.Slf4j ; @Component @Order ( 2 ) @Slf4j public class B_Processor implements PriceCommonProcessor { @Override public Integer process ( Integer lastPrice ) { log . info ( \"B >>>> processor\" ); return lastPrice - 200 ; } } C\u9636\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import org.springframework.core.annotation.Order ; import org.springframework.stereotype.Component ; import lombok.extern.slf4j.Slf4j ; @Component @Order ( 3 ) @Slf4j public class C_Processor implements PriceCommonProcessor { @Override public Integer process ( Integer lastPrice ) { log . info ( \"C >>>> processor\" ); return lastPrice - 300 ; } } \u4f7f\u7528\u53ca\u6d4b\u8bd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import java.util.List ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RestController ; import com.example.demo.processor.PriceCommonProcessor ; @RestController public class TestController { @Autowired private List < PriceCommonProcessor > list ; @GetMapping ( \"dd\" ) public Integer getPrice ( Integer lastPrice ) { for ( PriceCommonProcessor processor : list ) { lastPrice = processor . process ( lastPrice ); } return lastPrice ; } } \u6267\u884c\u547d\u4ee4 $ curl 'localhost:8080/dd?lastPrice=1000' \u63a7\u5236\u53f0\u65e5\u5fd7\u8f93\u51fa A >>>> processor B >>>> processor C >>>> processor @Autowired \u53ef\u4ee5\u76f4\u63a5\u6ce8\u5165\u540c\u4e00type\u7684\u5b9e\u4f8b\u5230list\uff0c\u6ce8\u5165\u7684\u987a\u5e8f\u5c31\u662f\u88ab @Order \u6807\u8bb0\u5230\u987a\u5e8f\uff0c\u4ece\u800c\u5f62\u6210pipeline\u6a21\u578b \u4e0d\u4ec5\u53ef\u4ee5\u987a\u5e8f\u6ce8\u5165\u5230 List \uff0c \u8fd8\u53ef\u4ee5\u6ce8\u5165\u5230 Map 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import java.util.List ; import java.util.Map ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RestController ; import com.example.demo.processor.PriceCommonProcessor ; import lombok.extern.slf4j.Slf4j ; @RestController @Slf4j public class TestController { @Autowired private List < PriceCommonProcessor > list ; @Autowired private Map < String , PriceCommonProcessor > map ; @GetMapping ( \"dd\" ) public Integer getPrice ( Integer lastPrice ) { map . entrySet (). forEach ( e -> { log . info ( \"{}--->>{}\" , e . getKey (), e . getValue (). getClass (). getName () ); }); return 1 ; } } a_Processor\u2014>>com.example.demo.processor.A_Processor b_Processor\u2014>>com.example.demo.processor.B_Processor c_Processor\u2014>>com.example.demo.processor.C_Processor","title":"Spring\u5b9e\u73b0pipeline"},{"location":"guava/","text":"guava-retry\u91cd\u8bd5\u673a\u5236 \u00b6 1 2 3 4 5 <dependency> <groupId> com.github.rholder </groupId> <artifactId> guava-retrying </artifactId> <version> 2.0.0 </version> </dependency> 1 2 3 4 5 6 7 8 9 10 Retryer < Boolean > retryer = RetryerBuilder .< Boolean > newBuilder () . retryIfResult ( Predicates . equalTo ( false )) . retryIfRuntimeException () . retryIfException () . withStopStrategy ( StopStrategies . neverStop ()) . build (); retryer . call (()->{ scene . setSceneKey ( IDUtil . verifyCode ()); return sceneService . save ( scene ); }); \u5b57\u7b26\u4e32\u5207\u5272Splitter \u00b6 1 2 3 4 5 List < String > bigbayAppIdList = Splitter . on ( \",\" ) . omitEmptyStrings () . trimResults () . splitToList ( \"123,fjdi, 88,99 , , 8 9 \" ) . forEach ( System . out :: println ); \u8fd0\u884c\u7ed3\u679c 123 fjdi 88 99 8 9 \u62c6\u5206\u5668\u5de5\u5382 \u65b9\u6cd5 \u63cf\u8ff0 \u8303\u4f8b Splitter.on(char) \u6309\u5355\u4e2a\u5b57\u7b26\u62c6\u5206 Splitter.on(\u2018;\u2019) Splitter.on(CharMatcher) \u6309\u5b57\u7b26\u5339\u914d\u5668\u62c6\u5206 Splitter.on(CharMatcher.BREAKING_WHITESPACE) Splitter.on(String) \u6309\u5b57\u7b26\u4e32\u62c6\u5206 Splitter.on(\u201c, \u201c) Splitter.on(Pattern) Splitter.onPattern(String) \u6309\u6b63\u5219\u8868\u8fbe\u5f0f\u62c6\u5206 Splitter.onPattern(\u201c\\r?\\n\u201d) Splitter.fixedLength(int) \u6309\u56fa\u5b9a\u957f\u5ea6\u62c6\u5206\uff1b\u6700\u540e\u4e00\u6bb5\u53ef\u80fd\u6bd4\u7ed9\u5b9a\u957f\u5ea6\u77ed\uff0c\u4f46\u4e0d\u4f1a\u4e3a\u7a7a\u3002 Splitter.fixedLength(3) \u62c6\u5206\u5668\u4fee\u9970\u7b26 \u65b9\u6cd5 \u63cf\u8ff0 omitEmptyStrings() \u4ece\u7ed3\u679c\u4e2d\u81ea\u52a8\u5ffd\u7565\u7a7a\u5b57\u7b26\u4e32 trimResults() \u79fb\u9664\u7ed3\u679c\u5b57\u7b26\u4e32\u7684\u524d\u5bfc\u7a7a\u767d\u548c\u5c3e\u90e8\u7a7a\u767d trimResults(CharMatcher) \u7ed9\u5b9a\u5339\u914d\u5668\uff0c\u79fb\u9664\u7ed3\u679c\u5b57\u7b26\u4e32\u7684\u524d\u5bfc\u5339\u914d\u5b57\u7b26\u548c\u5c3e\u90e8\u5339\u914d\u5b57\u7b26 limit(int) \u9650\u5236\u62c6\u5206\u51fa\u7684\u5b57\u7b26\u4e32\u6570\u91cf","title":"guava"},{"location":"guava/#guava-retry","text":"1 2 3 4 5 <dependency> <groupId> com.github.rholder </groupId> <artifactId> guava-retrying </artifactId> <version> 2.0.0 </version> </dependency> 1 2 3 4 5 6 7 8 9 10 Retryer < Boolean > retryer = RetryerBuilder .< Boolean > newBuilder () . retryIfResult ( Predicates . equalTo ( false )) . retryIfRuntimeException () . retryIfException () . withStopStrategy ( StopStrategies . neverStop ()) . build (); retryer . call (()->{ scene . setSceneKey ( IDUtil . verifyCode ()); return sceneService . save ( scene ); });","title":"guava-retry\u91cd\u8bd5\u673a\u5236"},{"location":"guava/#splitter","text":"1 2 3 4 5 List < String > bigbayAppIdList = Splitter . on ( \",\" ) . omitEmptyStrings () . trimResults () . splitToList ( \"123,fjdi, 88,99 , , 8 9 \" ) . forEach ( System . out :: println ); \u8fd0\u884c\u7ed3\u679c 123 fjdi 88 99 8 9 \u62c6\u5206\u5668\u5de5\u5382 \u65b9\u6cd5 \u63cf\u8ff0 \u8303\u4f8b Splitter.on(char) \u6309\u5355\u4e2a\u5b57\u7b26\u62c6\u5206 Splitter.on(\u2018;\u2019) Splitter.on(CharMatcher) \u6309\u5b57\u7b26\u5339\u914d\u5668\u62c6\u5206 Splitter.on(CharMatcher.BREAKING_WHITESPACE) Splitter.on(String) \u6309\u5b57\u7b26\u4e32\u62c6\u5206 Splitter.on(\u201c, \u201c) Splitter.on(Pattern) Splitter.onPattern(String) \u6309\u6b63\u5219\u8868\u8fbe\u5f0f\u62c6\u5206 Splitter.onPattern(\u201c\\r?\\n\u201d) Splitter.fixedLength(int) \u6309\u56fa\u5b9a\u957f\u5ea6\u62c6\u5206\uff1b\u6700\u540e\u4e00\u6bb5\u53ef\u80fd\u6bd4\u7ed9\u5b9a\u957f\u5ea6\u77ed\uff0c\u4f46\u4e0d\u4f1a\u4e3a\u7a7a\u3002 Splitter.fixedLength(3) \u62c6\u5206\u5668\u4fee\u9970\u7b26 \u65b9\u6cd5 \u63cf\u8ff0 omitEmptyStrings() \u4ece\u7ed3\u679c\u4e2d\u81ea\u52a8\u5ffd\u7565\u7a7a\u5b57\u7b26\u4e32 trimResults() \u79fb\u9664\u7ed3\u679c\u5b57\u7b26\u4e32\u7684\u524d\u5bfc\u7a7a\u767d\u548c\u5c3e\u90e8\u7a7a\u767d trimResults(CharMatcher) \u7ed9\u5b9a\u5339\u914d\u5668\uff0c\u79fb\u9664\u7ed3\u679c\u5b57\u7b26\u4e32\u7684\u524d\u5bfc\u5339\u914d\u5b57\u7b26\u548c\u5c3e\u90e8\u5339\u914d\u5b57\u7b26 limit(int) \u9650\u5236\u62c6\u5206\u51fa\u7684\u5b57\u7b26\u4e32\u6570\u91cf","title":"\u5b57\u7b26\u4e32\u5207\u5272Splitter"},{"location":"okhttp/","text":"springboot \u6574\u5408 okhttp3 \u00b6 Tip okhttp3 + kotlin = okhttp4 1. \u6dfb\u52a0pom\u4f9d\u8d56 \u00b6 1 2 3 4 5 6 7 8 9 <dependency> <groupId> com.squareup.okhttp3 </groupId> <artifactId> okhttp </artifactId> <version> 3.14.2 </version> </dependency> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-lang3 </artifactId> </dependency> 2. \u914d\u7f6e\u7c7b \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 package com.example.demo.config ; import java.security.KeyManagementException ; import java.security.NoSuchAlgorithmException ; import java.security.SecureRandom ; import java.security.cert.CertificateException ; import java.security.cert.X509Certificate ; import java.util.concurrent.TimeUnit ; import javax.net.ssl.SSLContext ; import javax.net.ssl.SSLSocketFactory ; import javax.net.ssl.TrustManager ; import javax.net.ssl.X509TrustManager ; import okhttp3.ConnectionPool ; import okhttp3.OkHttpClient ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; @Configuration public class OkHttpConfig { @Bean public X509TrustManager x509TrustManager () { return new X509TrustManager () { @Override public void checkClientTrusted ( X509Certificate [] arg0 , String arg1 ) throws CertificateException { // TODO Auto-generated method stub } @Override public void checkServerTrusted ( X509Certificate [] arg0 , String arg1 ) throws CertificateException { // TODO Auto-generated method stub } @Override public X509Certificate [] getAcceptedIssuers () { return new X509Certificate [ 0 ]; } }; } @Bean public SSLSocketFactory sslSocketFactory () { try { //\u4fe1\u4efb\u4efb\u4f55\u94fe\u63a5 SSLContext sslContext = SSLContext . getInstance ( \"TLS\" ); sslContext . init ( null , new TrustManager []{ x509TrustManager ()}, new SecureRandom ()); return sslContext . getSocketFactory (); } catch ( NoSuchAlgorithmException e ) { e . printStackTrace (); } catch ( KeyManagementException e ) { e . printStackTrace (); } return null ; } /** * Create a new connection pool with tuning parameters appropriate for a single-user application. * The tuning parameters in this pool are subject to change in future OkHttp releases. Currently */ @Bean public ConnectionPool pool () { return new ConnectionPool ( 200 , 5 , TimeUnit . MINUTES ); } @Bean public OkHttpClient okHttpClient () { return new OkHttpClient . Builder () . sslSocketFactory ( sslSocketFactory (), x509TrustManager ()) . retryOnConnectionFailure ( false ) //\u662f\u5426\u5f00\u542f\u7f13\u5b58 . connectionPool ( pool ()) //\u8fde\u63a5\u6c60 . connectTimeout ( 10L , TimeUnit . SECONDS ) . readTimeout ( 10L , TimeUnit . SECONDS ) . build (); } } 3. \u5de5\u5177\u7c7b \u00b6 3.1 SpringUtil \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package com.example.demo.util ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import org.springframework.beans.BeansException ; import org.springframework.context.ApplicationContext ; import org.springframework.context.ApplicationContextAware ; public class SpringUtil implements ApplicationContextAware { private static ApplicationContext applicationContext ; private static final Logger logger = LoggerFactory . getLogger ( SpringUtil . class ); @Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { if ( SpringUtil . applicationContext == null ) { SpringUtil . applicationContext = applicationContext ; } logger . info ( \"========ApplicationContext\u914d\u7f6e\u6210\u529f,\u5728\u666e\u901a\u7c7b\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528SpringUtils.getAppContext()\u83b7\u53d6applicationContext\u5bf9\u8c61,applicationContext=\" + SpringUtil . applicationContext + \"========\" ); logger . info ( \"---------------------------------------------------------------------\" ); } //\u83b7\u53d6applicationContext public static ApplicationContext getApplicationContext () { return applicationContext ; } //\u901a\u8fc7name\u83b7\u53d6 Bean. public static Object getBean ( String name ){ return getApplicationContext (). getBean ( name ); } //\u901a\u8fc7class\u83b7\u53d6Bean. public static < T > T getBean ( Class < T > clazz ){ return getApplicationContext (). getBean ( clazz ); } //\u901a\u8fc7name,\u4ee5\u53caClazz\u8fd4\u56de\u6307\u5b9a\u7684Bean public static < T > T getBean ( String name , Class < T > clazz ){ return getApplicationContext (). getBean ( name , clazz ); } } 3.2 OkHttpUtil \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 package com.example.demo.util ; import java.util.Iterator ; import java.util.Map ; import java.util.Map.Entry ; import okhttp3.FormBody ; import okhttp3.MediaType ; import okhttp3.OkHttpClient ; import okhttp3.Request ; import okhttp3.RequestBody ; import okhttp3.Response ; import org.apache.commons.lang3.exception.ExceptionUtils ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; public class OkHttpUtil { private static final Logger logger = LoggerFactory . getLogger ( OkHttpUtil . class ); /** * \u6839\u636emap\u83b7\u53d6get\u8bf7\u6c42\u53c2\u6570 * @param queries * @return */ public static StringBuffer getQueryString ( String url , Map < String , String > queries ){ StringBuffer sb = new StringBuffer ( url ); if ( queries != null && queries . keySet (). size () > 0 ) { boolean firstFlag = true ; Iterator < Entry < String , String >> iterator = queries . entrySet (). iterator (); while ( iterator . hasNext ()) { Entry < String , String > entry = ( Map . Entry < String , String >) iterator . next (); if ( firstFlag ) { sb . append ( \"?\" + entry . getKey () + \"=\" + entry . getValue ()); firstFlag = false ; } else { sb . append ( \"&\" + entry . getKey () + \"=\" + entry . getValue ()); } } } return sb ; } /** * \u8c03\u7528okhttp\u7684newCall\u65b9\u6cd5 * @param request * @return */ private static String execNewCall ( Request request ){ Response response = null ; try { OkHttpClient okHttpClient = SpringUtil . getBean ( OkHttpClient . class ); response = okHttpClient . newCall ( request ). execute (); //int code = response.code(); if ( response . isSuccessful ()) { return response . body (). string (); } } catch ( Exception e ) { logger . error ( \"okhttp3 put error >> ex = {}\" , ExceptionUtils . getStackTrace ( e )); } finally { if ( response != null ) { response . close (); } } return \"\" ; } /** * get * @param url \u8bf7\u6c42\u7684url * @param queries \u8bf7\u6c42\u7684\u53c2\u6570\uff0c\u5728\u6d4f\u89c8\u5668\uff1f\u540e\u9762\u7684\u6570\u636e\uff0c\u6ca1\u6709\u53ef\u4ee5\u4f20null * @return */ public static String get ( String url , Map < String , String > queries ) { StringBuffer sb = getQueryString ( url , queries ); Request request = new Request . Builder () . url ( sb . toString ()) . build (); return execNewCall ( request ); } /** * post * * @param url \u8bf7\u6c42\u7684url * @param params post form \u63d0\u4ea4\u7684\u53c2\u6570 * @return */ public static String postFormParams ( String url , Map < String , String > params ) { FormBody . Builder builder = new FormBody . Builder (); //\u6dfb\u52a0\u53c2\u6570 if ( params != null && params . keySet (). size () > 0 ) { for ( String key : params . keySet ()) { builder . add ( key , params . get ( key )); } } Request request = new Request . Builder () . url ( url ) . post ( builder . build ()) . build (); return execNewCall ( request ); } /** * Post\u8bf7\u6c42\u53d1\u9001JSON\u6570\u636e....{\"name\":\"zhangsan\",\"pwd\":\"123456\"} * \u53c2\u6570\u4e00\uff1a\u8bf7\u6c42Url * \u53c2\u6570\u4e8c\uff1a\u8bf7\u6c42\u7684JSON * \u53c2\u6570\u4e09\uff1a\u8bf7\u6c42\u56de\u8c03 */ public static String postJsonParams ( String url , String jsonParams ) { RequestBody requestBody = RequestBody . create ( MediaType . parse ( \"application/json; charset=utf-8\" ), jsonParams ); Request request = new Request . Builder () . url ( url ) . post ( requestBody ) . build (); return execNewCall ( request ); } /** * Post\u8bf7\u6c42\u53d1\u9001xml\u6570\u636e.... * \u53c2\u6570\u4e00\uff1a\u8bf7\u6c42Url * \u53c2\u6570\u4e8c\uff1a\u8bf7\u6c42\u7684xmlString * \u53c2\u6570\u4e09\uff1a\u8bf7\u6c42\u56de\u8c03 */ public static String postXmlParams ( String url , String xml ) { RequestBody requestBody = RequestBody . create ( MediaType . parse ( \"application/xml; charset=utf-8\" ), xml ); Request request = new Request . Builder () . url ( url ) . post ( requestBody ) . build (); return execNewCall ( request ); } } 4. \u4f7f\u7528\u65b9\u5f0f \u00b6 Note OkHttpUtil\u5185\u90fd\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 StringUtil\u9700\u8981\u5b9e\u4f8b\u5316\uff0c\u5b9e\u4f8b\u5316\u4e24\u79cd\u7ed3\u6784\u4e09\u79cd\u65b9\u5f0f\uff1a StringUtil\u5728\u7c7b\u626b\u63cf\u8def\u5f84\u4e0b\uff0c\u76f4\u63a5\u5728StringUtil\u4e0a\u52a0\u6ce8\u89e3 @Component \u6216\u8005 @Configuration StringUtil\u4e0d\u5728\u7c7b\u626b\u63cf\u8def\u5f84\u4e0b\uff1a\u6709\u5982\u4e0b\u4e24\u79cd\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.context.annotation.Import ; import com.example.demo.util.SpringUtil ; @SpringBootApplication @Import ( SpringUtil . class ) //\u65b9\u5f0f\u4e00 public class DemoApplication { //\u65b9\u5f0f\u4e8c /*@Bean public SpringUtil getSpringUtil() { return new SpringUtil(); }*/ public static void main ( String [] args ) { SpringApplication . run ( DemoApplication . class , args ); } }","title":"okhttp"},{"location":"okhttp/#springboot-okhttp3","text":"Tip okhttp3 + kotlin = okhttp4","title":"springboot \u6574\u5408 okhttp3"},{"location":"okhttp/#1-pom","text":"1 2 3 4 5 6 7 8 9 <dependency> <groupId> com.squareup.okhttp3 </groupId> <artifactId> okhttp </artifactId> <version> 3.14.2 </version> </dependency> <dependency> <groupId> org.apache.commons </groupId> <artifactId> commons-lang3 </artifactId> </dependency>","title":"1. \u6dfb\u52a0pom\u4f9d\u8d56"},{"location":"okhttp/#2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 package com.example.demo.config ; import java.security.KeyManagementException ; import java.security.NoSuchAlgorithmException ; import java.security.SecureRandom ; import java.security.cert.CertificateException ; import java.security.cert.X509Certificate ; import java.util.concurrent.TimeUnit ; import javax.net.ssl.SSLContext ; import javax.net.ssl.SSLSocketFactory ; import javax.net.ssl.TrustManager ; import javax.net.ssl.X509TrustManager ; import okhttp3.ConnectionPool ; import okhttp3.OkHttpClient ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; @Configuration public class OkHttpConfig { @Bean public X509TrustManager x509TrustManager () { return new X509TrustManager () { @Override public void checkClientTrusted ( X509Certificate [] arg0 , String arg1 ) throws CertificateException { // TODO Auto-generated method stub } @Override public void checkServerTrusted ( X509Certificate [] arg0 , String arg1 ) throws CertificateException { // TODO Auto-generated method stub } @Override public X509Certificate [] getAcceptedIssuers () { return new X509Certificate [ 0 ]; } }; } @Bean public SSLSocketFactory sslSocketFactory () { try { //\u4fe1\u4efb\u4efb\u4f55\u94fe\u63a5 SSLContext sslContext = SSLContext . getInstance ( \"TLS\" ); sslContext . init ( null , new TrustManager []{ x509TrustManager ()}, new SecureRandom ()); return sslContext . getSocketFactory (); } catch ( NoSuchAlgorithmException e ) { e . printStackTrace (); } catch ( KeyManagementException e ) { e . printStackTrace (); } return null ; } /** * Create a new connection pool with tuning parameters appropriate for a single-user application. * The tuning parameters in this pool are subject to change in future OkHttp releases. Currently */ @Bean public ConnectionPool pool () { return new ConnectionPool ( 200 , 5 , TimeUnit . MINUTES ); } @Bean public OkHttpClient okHttpClient () { return new OkHttpClient . Builder () . sslSocketFactory ( sslSocketFactory (), x509TrustManager ()) . retryOnConnectionFailure ( false ) //\u662f\u5426\u5f00\u542f\u7f13\u5b58 . connectionPool ( pool ()) //\u8fde\u63a5\u6c60 . connectTimeout ( 10L , TimeUnit . SECONDS ) . readTimeout ( 10L , TimeUnit . SECONDS ) . build (); } }","title":"2. \u914d\u7f6e\u7c7b"},{"location":"okhttp/#3","text":"","title":"3. \u5de5\u5177\u7c7b"},{"location":"okhttp/#31-springutil","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package com.example.demo.util ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import org.springframework.beans.BeansException ; import org.springframework.context.ApplicationContext ; import org.springframework.context.ApplicationContextAware ; public class SpringUtil implements ApplicationContextAware { private static ApplicationContext applicationContext ; private static final Logger logger = LoggerFactory . getLogger ( SpringUtil . class ); @Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { if ( SpringUtil . applicationContext == null ) { SpringUtil . applicationContext = applicationContext ; } logger . info ( \"========ApplicationContext\u914d\u7f6e\u6210\u529f,\u5728\u666e\u901a\u7c7b\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528SpringUtils.getAppContext()\u83b7\u53d6applicationContext\u5bf9\u8c61,applicationContext=\" + SpringUtil . applicationContext + \"========\" ); logger . info ( \"---------------------------------------------------------------------\" ); } //\u83b7\u53d6applicationContext public static ApplicationContext getApplicationContext () { return applicationContext ; } //\u901a\u8fc7name\u83b7\u53d6 Bean. public static Object getBean ( String name ){ return getApplicationContext (). getBean ( name ); } //\u901a\u8fc7class\u83b7\u53d6Bean. public static < T > T getBean ( Class < T > clazz ){ return getApplicationContext (). getBean ( clazz ); } //\u901a\u8fc7name,\u4ee5\u53caClazz\u8fd4\u56de\u6307\u5b9a\u7684Bean public static < T > T getBean ( String name , Class < T > clazz ){ return getApplicationContext (). getBean ( name , clazz ); } }","title":"3.1 SpringUtil"},{"location":"okhttp/#32-okhttputil","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 package com.example.demo.util ; import java.util.Iterator ; import java.util.Map ; import java.util.Map.Entry ; import okhttp3.FormBody ; import okhttp3.MediaType ; import okhttp3.OkHttpClient ; import okhttp3.Request ; import okhttp3.RequestBody ; import okhttp3.Response ; import org.apache.commons.lang3.exception.ExceptionUtils ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; public class OkHttpUtil { private static final Logger logger = LoggerFactory . getLogger ( OkHttpUtil . class ); /** * \u6839\u636emap\u83b7\u53d6get\u8bf7\u6c42\u53c2\u6570 * @param queries * @return */ public static StringBuffer getQueryString ( String url , Map < String , String > queries ){ StringBuffer sb = new StringBuffer ( url ); if ( queries != null && queries . keySet (). size () > 0 ) { boolean firstFlag = true ; Iterator < Entry < String , String >> iterator = queries . entrySet (). iterator (); while ( iterator . hasNext ()) { Entry < String , String > entry = ( Map . Entry < String , String >) iterator . next (); if ( firstFlag ) { sb . append ( \"?\" + entry . getKey () + \"=\" + entry . getValue ()); firstFlag = false ; } else { sb . append ( \"&\" + entry . getKey () + \"=\" + entry . getValue ()); } } } return sb ; } /** * \u8c03\u7528okhttp\u7684newCall\u65b9\u6cd5 * @param request * @return */ private static String execNewCall ( Request request ){ Response response = null ; try { OkHttpClient okHttpClient = SpringUtil . getBean ( OkHttpClient . class ); response = okHttpClient . newCall ( request ). execute (); //int code = response.code(); if ( response . isSuccessful ()) { return response . body (). string (); } } catch ( Exception e ) { logger . error ( \"okhttp3 put error >> ex = {}\" , ExceptionUtils . getStackTrace ( e )); } finally { if ( response != null ) { response . close (); } } return \"\" ; } /** * get * @param url \u8bf7\u6c42\u7684url * @param queries \u8bf7\u6c42\u7684\u53c2\u6570\uff0c\u5728\u6d4f\u89c8\u5668\uff1f\u540e\u9762\u7684\u6570\u636e\uff0c\u6ca1\u6709\u53ef\u4ee5\u4f20null * @return */ public static String get ( String url , Map < String , String > queries ) { StringBuffer sb = getQueryString ( url , queries ); Request request = new Request . Builder () . url ( sb . toString ()) . build (); return execNewCall ( request ); } /** * post * * @param url \u8bf7\u6c42\u7684url * @param params post form \u63d0\u4ea4\u7684\u53c2\u6570 * @return */ public static String postFormParams ( String url , Map < String , String > params ) { FormBody . Builder builder = new FormBody . Builder (); //\u6dfb\u52a0\u53c2\u6570 if ( params != null && params . keySet (). size () > 0 ) { for ( String key : params . keySet ()) { builder . add ( key , params . get ( key )); } } Request request = new Request . Builder () . url ( url ) . post ( builder . build ()) . build (); return execNewCall ( request ); } /** * Post\u8bf7\u6c42\u53d1\u9001JSON\u6570\u636e....{\"name\":\"zhangsan\",\"pwd\":\"123456\"} * \u53c2\u6570\u4e00\uff1a\u8bf7\u6c42Url * \u53c2\u6570\u4e8c\uff1a\u8bf7\u6c42\u7684JSON * \u53c2\u6570\u4e09\uff1a\u8bf7\u6c42\u56de\u8c03 */ public static String postJsonParams ( String url , String jsonParams ) { RequestBody requestBody = RequestBody . create ( MediaType . parse ( \"application/json; charset=utf-8\" ), jsonParams ); Request request = new Request . Builder () . url ( url ) . post ( requestBody ) . build (); return execNewCall ( request ); } /** * Post\u8bf7\u6c42\u53d1\u9001xml\u6570\u636e.... * \u53c2\u6570\u4e00\uff1a\u8bf7\u6c42Url * \u53c2\u6570\u4e8c\uff1a\u8bf7\u6c42\u7684xmlString * \u53c2\u6570\u4e09\uff1a\u8bf7\u6c42\u56de\u8c03 */ public static String postXmlParams ( String url , String xml ) { RequestBody requestBody = RequestBody . create ( MediaType . parse ( \"application/xml; charset=utf-8\" ), xml ); Request request = new Request . Builder () . url ( url ) . post ( requestBody ) . build (); return execNewCall ( request ); } }","title":"3.2 OkHttpUtil"},{"location":"okhttp/#4","text":"Note OkHttpUtil\u5185\u90fd\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 StringUtil\u9700\u8981\u5b9e\u4f8b\u5316\uff0c\u5b9e\u4f8b\u5316\u4e24\u79cd\u7ed3\u6784\u4e09\u79cd\u65b9\u5f0f\uff1a StringUtil\u5728\u7c7b\u626b\u63cf\u8def\u5f84\u4e0b\uff0c\u76f4\u63a5\u5728StringUtil\u4e0a\u52a0\u6ce8\u89e3 @Component \u6216\u8005 @Configuration StringUtil\u4e0d\u5728\u7c7b\u626b\u63cf\u8def\u5f84\u4e0b\uff1a\u6709\u5982\u4e0b\u4e24\u79cd\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.context.annotation.Import ; import com.example.demo.util.SpringUtil ; @SpringBootApplication @Import ( SpringUtil . class ) //\u65b9\u5f0f\u4e00 public class DemoApplication { //\u65b9\u5f0f\u4e8c /*@Bean public SpringUtil getSpringUtil() { return new SpringUtil(); }*/ public static void main ( String [] args ) { SpringApplication . run ( DemoApplication . class , args ); } }","title":"4. \u4f7f\u7528\u65b9\u5f0f"},{"location":"read-properties/","text":"\u8001\u53f8\u673a\u6559\u4f60\u901a\u8fc7Spring\u6765\u8bfb\u53d6\u6587\u4ef6\u7684\u5404\u79cd\u59ff\u52bf \u00b6 1. \u6982\u8ff0 \u00b6 \u5728\u65e5\u5e38\u4e1a\u52a1\u5f00\u53d1\u4e2d\u6211\u4eec\u7ecf\u5e38\u6709\u53ef\u80fd\u8bfb\u53d6\u4e00\u4e9b\u81ea\u5b9a\u4e49\u914d\u7f6e\u6216\u8005\u6587\u4ef6\u3002\u6bd4\u5982\u8bf4\u516c\u79c1\u94a5\u6587\u4ef6\u3001\u4e00\u4e9b\u56fa\u5b9a\u7684\u8bcd\u5178\u6587\u4ef6\u4e4b\u7c7b\u7684\uff0c\u8fd9\u4e00\u7c7b\u7edf\u79f0\u4e3a\u8d44\u6e90\uff08Resource\uff09\u3002\u5f88\u591a\u60c5\u51b5\u4e0b\u90fd\u662f\u81ea\u5df1\u5199IO\u6765\u8bfb\u53d6\u3002\u4eca\u5929\u5f00\u59cb\u4f60\u53ef\u4ee5\u4e0d\u7528\u518d\u81ea\u5df1\u9020\u8f6e\u5b50\u4e86\u3002\u56e0\u4e3aSpring\u81ea\u5e26\u6709\u8d44\u6e90\u52a0\u8f7d\u529f\u80fd\uff0c\u751a\u81f3\u8fd8\u6709\u975e\u5e38\u4fbf\u5229\u7684\u65b9\u6cd5\u5c06\u8bfb\u53d6\u7684\u5185\u5bb9\u6ce8\u5165Spring bean\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u6765\u89c1\u8bc6\u4e00\u4e0b\u5427\u3002 2. \u901a\u8fc7Resource\u63a5\u53e3 \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528org.springframework.core.io.Resource\u63a5\u53e3\u7b80\u5316\u8d44\u6e90\u6587\u4ef6\u7684\u5b9a\u4f4d\u3002Spring\u5e2e\u52a9\u6211\u4eec\u4f7f\u7528\u8d44\u6e90\u52a0\u8f7d\u5668\u67e5\u627e\u548c\u8bfb\u53d6\u8d44\u6e90\uff0c\u8d44\u6e90\u52a0\u8f7d\u5668\u6839\u636e\u63d0\u4f9b\u7684\u8def\u5f84\u51b3\u5b9a\u9009\u62e9\u54ea\u4e2aResource\u5b9e\u73b0\u3002 2.1 \u4f7f\u7528Resource\u7684\u5b9e\u73b0\u7c7b \u00b6 org.springframework.core.io.Resource\u63a5\u53e3\u5e38\u7528\u7684\u6709\u4e24\u4e2a\u5b9e\u73b0\u7c7b\uff1a org.springframework.core.io.ClassPathResource \u7528\u6765\u52a0\u8f7dclasspath\u4e0b\u7684\u8d44\u6e90\uff0c\u6211\u4eec\u76f4\u63a5\u8bfb\u53d6springboot \u914d\u7f6e\u6587\u4ef6 application.properties,\u5176\u4e2d\u5df2\u7ecf\u5199\u5165\u4e86\u4e00\u4e2a\u914d\u7f6e server.port=8080 org.springframework.core.io.FileSystemResource \u7528\u6765\u52a0\u8f7d\u7cfb\u7edf\u6587\u4ef6\uff0c\u901a\u5e38\u901a\u8fc7\u6587\u4ef6\u7684\u7edd\u5bf9\u6216\u8005\u76f8\u5bf9\u8def\u5f84\u6765\u8bfb\u53d6\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u7528\u8fd9\u4e2a\u6765\u8bd5\u4e00\u8bd5\u3002\u4e0d\u540c\u7684\u662f\u8fd9\u6b21\u6211\u4eec\u9700\u8981\u6587\u4ef6\u7684\u8def\u5f84\u3002 2.2 \u4f7f\u7528ResourceLoader \u00b6 \u5982\u679c\u4f60\u4e1a\u52a1\u4e2d\u9700\u8981\u4f7f\u7528\u5ef6\u8fdf\u52a0\u8f7d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7bResourceLoader\uff1a \u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528@Autowired\u5c06ResourceLoader\u6ce8\u5165\u6211\u4eec\u7684bean \uff1a \u6839\u636e\u4e0a\u56feApplicationContext \u7ee7\u627f\u4e86ResourceLoader \u63a5\u53e3\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7Spring bean \u6ce8\u5165\u7684\u65b9\u5f0f\u6765\u8bfb\u53d6\u8d44\u6e90\u3002 \u8fd9\u79cd\u4f7f\u7528\u65b9\u5f0f\u770b\u4e0a\u53bb\u66f4Spring\uff0c\u63a5\u7740\u5f80\u4e0b\u770b\uff0c\u8fd8\u6709\u66f4Spring\u7684\u9a9a\u64cd\u4f5c\u3002 2.3 \u4f7f\u7528@Value\u6ce8\u89e3 \u00b6 \u6211\u4eec\u76f4\u63a5\u4f7f\u7528@Value\u6ce8\u89e3\u5c06\u8d44\u6e90\u76f4\u63a5\u6ce8\u5165Spring bean\u3002\u8fd8\u6709\u8fd9\u79cd\u64cd\u4f5c\uff01\u4e0d\u884c\u4e86\uff01\u6211\u5df2\u7ecf\u8feb\u4e0d\u53ca\u5f85\u7684\u8981\u5199\u51e0\u884c\u8bd5\u8bd5\u4e86\uff1a \u5b8c\u7f8e\u65e0\u6687\uff01\u65ad\u8a00\u5168\u90e8\u6b63\u786e\uff01\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u8bfb\u53d6\u56fe\u7247\u3002\u6211\u60f3\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u4e2a\u7559\u7ed9\u4f60\u81ea\u5df1\u53d1\u6398\u3002\u4f46\u662f\u5c31\u8fd9\u4e48\u7ed3\u675f\u4e86\u5417\uff1f\u73a9\u4e00\u4e2a\u523a\u6fc0\u70b9\u7684\u3002\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u89e3\u6790\u51fa\u6765\u5e76\u6ce8\u5165\u5bf9\u8c61\u5462\uff1fSpEL(Spring Expression Language)\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u8ba9\u6211\u4eec\u6765\u89c1\u8bc6\u4e00\u4e0b\u5427\u3002 2.4 \u4f7f\u7528SpEL\u76f4\u63a5\u89e3\u6790 \u00b6 \u4e3a\u4e86\u5c55\u73b0\u7075\u6d3b\u6027\uff0c\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u81ea\u5df1\u7684\u89e3\u6790\u7c7b\u3002\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u7684\u5de5\u5177\u7c7b cn.felord.mapstruct.util.ResourceReader \u4e24\u4e2a\u65b9\u6cd5\u90fd\u662f\u4e00\u6837\u7684\u6548\u679c\uff0c\u4f46\u662f\u8981\u5c55\u73b0\u7684\u662f\u4e0d\u540c\u9014\u5f84\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5fc5\u987b\u8ba9\u5b83\u7684\u51fa\u573a\u4e0e\u4f17\u4e0d\u540c\uff1a \u88ab\u6ce8\u91ca\u6389\u7684\u4ee3\u7801\u540c\u6837\u7ba1\u7528\uff0c\u4f60\u5f88\u5bb9\u6613\u89c2\u5bdf\u5230\u5b83\u4eec\u4e4b\u95f4\u7684\u5dee\u522b\u3002 3. \u603b\u7ed3 \u00b6 \u7ecf\u8fc7\u4e0a\u9762\u7684\u8bb2\u89e3\uff0c\u6211\u4eec\u4e86\u89e3\u4e86Spring\u53bb\u5904\u7406\u8d44\u6e90\u6587\u4ef6\u7684\u5404\u79cd\u59ff\u52bf\u3002\u751a\u81f3\u8fd8\u6709\u76f4\u63a5\u83b7\u53d6\u5e76\u88c5\u914d\u8d44\u6e90\u7684\u65b9\u6cd5\u3002\u76f8\u4fe1\u770b\u4e86\u672c\u6587\u4e4b\u540e\u4f60\u4f1a\u7acb\u5373\u629b\u6389\u4ee5\u524d\u7684\u8001\u5957\u505a\u6cd5\u3002\u8d76\u7d27\u7ed9\u7801\u519c\u5c0f\u80d6\u54e5\u70b9\u4e2a\u8d5e\u5427\u3002","title":"\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6"},{"location":"read-properties/#spring","text":"","title":"\u8001\u53f8\u673a\u6559\u4f60\u901a\u8fc7Spring\u6765\u8bfb\u53d6\u6587\u4ef6\u7684\u5404\u79cd\u59ff\u52bf"},{"location":"read-properties/#1","text":"\u5728\u65e5\u5e38\u4e1a\u52a1\u5f00\u53d1\u4e2d\u6211\u4eec\u7ecf\u5e38\u6709\u53ef\u80fd\u8bfb\u53d6\u4e00\u4e9b\u81ea\u5b9a\u4e49\u914d\u7f6e\u6216\u8005\u6587\u4ef6\u3002\u6bd4\u5982\u8bf4\u516c\u79c1\u94a5\u6587\u4ef6\u3001\u4e00\u4e9b\u56fa\u5b9a\u7684\u8bcd\u5178\u6587\u4ef6\u4e4b\u7c7b\u7684\uff0c\u8fd9\u4e00\u7c7b\u7edf\u79f0\u4e3a\u8d44\u6e90\uff08Resource\uff09\u3002\u5f88\u591a\u60c5\u51b5\u4e0b\u90fd\u662f\u81ea\u5df1\u5199IO\u6765\u8bfb\u53d6\u3002\u4eca\u5929\u5f00\u59cb\u4f60\u53ef\u4ee5\u4e0d\u7528\u518d\u81ea\u5df1\u9020\u8f6e\u5b50\u4e86\u3002\u56e0\u4e3aSpring\u81ea\u5e26\u6709\u8d44\u6e90\u52a0\u8f7d\u529f\u80fd\uff0c\u751a\u81f3\u8fd8\u6709\u975e\u5e38\u4fbf\u5229\u7684\u65b9\u6cd5\u5c06\u8bfb\u53d6\u7684\u5185\u5bb9\u6ce8\u5165Spring bean\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u6765\u89c1\u8bc6\u4e00\u4e0b\u5427\u3002","title":"1. \u6982\u8ff0"},{"location":"read-properties/#2-resource","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528org.springframework.core.io.Resource\u63a5\u53e3\u7b80\u5316\u8d44\u6e90\u6587\u4ef6\u7684\u5b9a\u4f4d\u3002Spring\u5e2e\u52a9\u6211\u4eec\u4f7f\u7528\u8d44\u6e90\u52a0\u8f7d\u5668\u67e5\u627e\u548c\u8bfb\u53d6\u8d44\u6e90\uff0c\u8d44\u6e90\u52a0\u8f7d\u5668\u6839\u636e\u63d0\u4f9b\u7684\u8def\u5f84\u51b3\u5b9a\u9009\u62e9\u54ea\u4e2aResource\u5b9e\u73b0\u3002","title":"2. \u901a\u8fc7Resource\u63a5\u53e3"},{"location":"read-properties/#21-resource","text":"org.springframework.core.io.Resource\u63a5\u53e3\u5e38\u7528\u7684\u6709\u4e24\u4e2a\u5b9e\u73b0\u7c7b\uff1a org.springframework.core.io.ClassPathResource \u7528\u6765\u52a0\u8f7dclasspath\u4e0b\u7684\u8d44\u6e90\uff0c\u6211\u4eec\u76f4\u63a5\u8bfb\u53d6springboot \u914d\u7f6e\u6587\u4ef6 application.properties,\u5176\u4e2d\u5df2\u7ecf\u5199\u5165\u4e86\u4e00\u4e2a\u914d\u7f6e server.port=8080 org.springframework.core.io.FileSystemResource \u7528\u6765\u52a0\u8f7d\u7cfb\u7edf\u6587\u4ef6\uff0c\u901a\u5e38\u901a\u8fc7\u6587\u4ef6\u7684\u7edd\u5bf9\u6216\u8005\u76f8\u5bf9\u8def\u5f84\u6765\u8bfb\u53d6\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u7528\u8fd9\u4e2a\u6765\u8bd5\u4e00\u8bd5\u3002\u4e0d\u540c\u7684\u662f\u8fd9\u6b21\u6211\u4eec\u9700\u8981\u6587\u4ef6\u7684\u8def\u5f84\u3002","title":"2.1 \u4f7f\u7528Resource\u7684\u5b9e\u73b0\u7c7b"},{"location":"read-properties/#22-resourceloader","text":"\u5982\u679c\u4f60\u4e1a\u52a1\u4e2d\u9700\u8981\u4f7f\u7528\u5ef6\u8fdf\u52a0\u8f7d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7bResourceLoader\uff1a \u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528@Autowired\u5c06ResourceLoader\u6ce8\u5165\u6211\u4eec\u7684bean \uff1a \u6839\u636e\u4e0a\u56feApplicationContext \u7ee7\u627f\u4e86ResourceLoader \u63a5\u53e3\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7Spring bean \u6ce8\u5165\u7684\u65b9\u5f0f\u6765\u8bfb\u53d6\u8d44\u6e90\u3002 \u8fd9\u79cd\u4f7f\u7528\u65b9\u5f0f\u770b\u4e0a\u53bb\u66f4Spring\uff0c\u63a5\u7740\u5f80\u4e0b\u770b\uff0c\u8fd8\u6709\u66f4Spring\u7684\u9a9a\u64cd\u4f5c\u3002","title":"2.2 \u4f7f\u7528ResourceLoader"},{"location":"read-properties/#23-value","text":"\u6211\u4eec\u76f4\u63a5\u4f7f\u7528@Value\u6ce8\u89e3\u5c06\u8d44\u6e90\u76f4\u63a5\u6ce8\u5165Spring bean\u3002\u8fd8\u6709\u8fd9\u79cd\u64cd\u4f5c\uff01\u4e0d\u884c\u4e86\uff01\u6211\u5df2\u7ecf\u8feb\u4e0d\u53ca\u5f85\u7684\u8981\u5199\u51e0\u884c\u8bd5\u8bd5\u4e86\uff1a \u5b8c\u7f8e\u65e0\u6687\uff01\u65ad\u8a00\u5168\u90e8\u6b63\u786e\uff01\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u8bfb\u53d6\u56fe\u7247\u3002\u6211\u60f3\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u4e2a\u7559\u7ed9\u4f60\u81ea\u5df1\u53d1\u6398\u3002\u4f46\u662f\u5c31\u8fd9\u4e48\u7ed3\u675f\u4e86\u5417\uff1f\u73a9\u4e00\u4e2a\u523a\u6fc0\u70b9\u7684\u3002\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u89e3\u6790\u51fa\u6765\u5e76\u6ce8\u5165\u5bf9\u8c61\u5462\uff1fSpEL(Spring Expression Language)\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u8ba9\u6211\u4eec\u6765\u89c1\u8bc6\u4e00\u4e0b\u5427\u3002","title":"2.3 \u4f7f\u7528@Value\u6ce8\u89e3"},{"location":"read-properties/#24-spel","text":"\u4e3a\u4e86\u5c55\u73b0\u7075\u6d3b\u6027\uff0c\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u81ea\u5df1\u7684\u89e3\u6790\u7c7b\u3002\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u7684\u5de5\u5177\u7c7b cn.felord.mapstruct.util.ResourceReader \u4e24\u4e2a\u65b9\u6cd5\u90fd\u662f\u4e00\u6837\u7684\u6548\u679c\uff0c\u4f46\u662f\u8981\u5c55\u73b0\u7684\u662f\u4e0d\u540c\u9014\u5f84\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5fc5\u987b\u8ba9\u5b83\u7684\u51fa\u573a\u4e0e\u4f17\u4e0d\u540c\uff1a \u88ab\u6ce8\u91ca\u6389\u7684\u4ee3\u7801\u540c\u6837\u7ba1\u7528\uff0c\u4f60\u5f88\u5bb9\u6613\u89c2\u5bdf\u5230\u5b83\u4eec\u4e4b\u95f4\u7684\u5dee\u522b\u3002","title":"2.4 \u4f7f\u7528SpEL\u76f4\u63a5\u89e3\u6790"},{"location":"read-properties/#3","text":"\u7ecf\u8fc7\u4e0a\u9762\u7684\u8bb2\u89e3\uff0c\u6211\u4eec\u4e86\u89e3\u4e86Spring\u53bb\u5904\u7406\u8d44\u6e90\u6587\u4ef6\u7684\u5404\u79cd\u59ff\u52bf\u3002\u751a\u81f3\u8fd8\u6709\u76f4\u63a5\u83b7\u53d6\u5e76\u88c5\u914d\u8d44\u6e90\u7684\u65b9\u6cd5\u3002\u76f8\u4fe1\u770b\u4e86\u672c\u6587\u4e4b\u540e\u4f60\u4f1a\u7acb\u5373\u629b\u6389\u4ee5\u524d\u7684\u8001\u5957\u505a\u6cd5\u3002\u8d76\u7d27\u7ed9\u7801\u519c\u5c0f\u80d6\u54e5\u70b9\u4e2a\u8d5e\u5427\u3002","title":"3. \u603b\u7ed3"},{"location":"retry/","text":"\u3010\u6700\u4f73\u5b9e\u8df5\u3011\u7a0b\u5e8f\u5458\u5982\u4f55\u4f18\u96c5\u7684\u8fdb\u884c\u91cd\u8bd5 \u00b6 1. \u8bf4\u660e \u00b6 \u6700\u8fd1\u516c\u53f8\u5728\u641e\u6d3b\u52a8\uff0c\u9700\u8981\u4f9d\u8d56\u4e00\u4e2a\u7b2c\u4e09\u65b9\u63a5\u53e3\uff0c\u6d4b\u8bd5\u9636\u6bb5\u5e76\u6ca1\u6709\u4ec0\u4e48\u5f02\u5e38\u72b6\u51b5\uff0c\u4f46\u4e0a\u7ebf\u540e\u53d1\u73b0\u4f9d\u8d56\u7684\u63a5\u53e3\u6709\u65f6\u5019\u4f1a\u56e0\u4e3a\u5185\u90e8\u9519\u8bef\u800c\u8fd4\u56de\u7cfb\u7edf\u5f02\u5e38\uff0c\u867d\u7136\u6982\u7387\u4e0d\u5927\uff0c\u4f46\u603b\u56e0\u4e3a\u8fd9\u4e2a\u800c\u62a5\u8b66\u603b\u662f\u4e0d\u597d\u7684\uff0c\u4f55\u51b5\u6b7b\u4fe1\u961f\u5217\u7684\u6d88\u606f\u8fd8\u9700\u8981\u9ebb\u70e6\u8fd0\u7ef4\u8fdb\u884c\u91cd\u65b0\u6295\u9012\uff0c\u6240\u4ee5\u52a0\u4e0a\u91cd\u8bd5\u673a\u5236\u52bf\u5728\u5fc5\u884c\u3002 \u91cd\u8bd5\u673a\u5236\u53ef\u4ee5\u4fdd\u62a4\u7cfb\u7edf\u51cf\u5c11\u56e0\u7f51\u7edc\u6ce2\u52a8\u3001\u4f9d\u8d56\u670d\u52a1\u77ed\u6682\u6027\u4e0d\u53ef\u7528\u5e26\u6765\u7684\u5f71\u54cd\uff0c\u8ba9\u7cfb\u7edf\u80fd\u66f4\u7a33\u5b9a\u7684\u8fd0\u884c\u7684\u4e00\u79cd\u4fdd\u62a4\u673a\u5236\u3002\u8ba9\u4f60\u539f\u672c\u5c31\u7a33\u5982\u72d7\u7684\u7cfb\u7edf\u66f4\u662f\u7a33\u4e0a\u52a0\u7a33\u3002 \u4e3a\u4e86\u65b9\u4fbf\u8bf4\u660e\uff0c\u5148\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u8fdb\u884c\u91cd\u8bd5\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import java.time.LocalTime ; import java.util.concurrent.atomic.AtomicLong ; import org.springframework.stereotype.Service ; import lombok.extern.slf4j.Slf4j ; @Service @Slf4j public class HelloService { private static AtomicLong helloTimes = new AtomicLong (); public String hello () throws Exception { long times = helloTimes . getAndIncrement (); if ( times % 4 != 0 ) { log . warn ( \"\u53d1\u751f\u5f02\u5e38, time: {}\" , LocalTime . now ()); throw new Exception ( \"\u53d1\u751fhello\u5f02\u5e38\" ); } return \"hello\" ; } } \u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u63a5\u53e3\u6bcf\u8c034\u6b21\u624d\u4f1a\u6210\u529f\u4e00\u6b21\u3002 2. \u624b\u52a8\u91cd\u8bd5 \u00b6 \u5148\u6765\u7528\u6700\u786c\u6838\u4e5f\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u5728\u8c03\u7528\u7684\u65f6\u5019\u8fdb\u91cd\u8bd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public String getPrice ( Integer lastPrice ) throws Exception { int maxRetryTimes = 4 ; String s = \"\" ; for ( int i = 1 ; i <= maxRetryTimes ; i ++) { try { s = helloService . hello (); log . info ( \"helloService\u8fd4\u56de:{}\" , s ); return s ; } catch ( Exception e ) { log . info ( \"helloService.hello()\u8c03\u7528\u5931\u8d25\uff0c\u51c6\u5907\u91cd\u8bd5\" ); } } throw new Exception ( \"\u91cd\u8bd5\u6b21\u6570\u8017\u5c3d\" ); } 1 2 3 4 5 6 7 \u53d1\u751f\u5f02\u5e38, time: 13:53:40.841 helloService.hello()\u8c03\u7528\u5931\u8d25\uff0c\u51c6\u5907\u91cd\u8bd5 \u53d1\u751f\u5f02\u5e38, time: 13:53:40.841 helloService.hello()\u8c03\u7528\u5931\u8d25\uff0c\u51c6\u5907\u91cd\u8bd5 \u53d1\u751f\u5f02\u5e38, time: 13:53:40.842 helloService.hello()\u8c03\u7528\u5931\u8d25\uff0c\u51c6\u5907\u91cd\u8bd5 helloService\u8fd4\u56de:hello \u7a0b\u5e8f\u5728\u6781\u77ed\u7684\u65f6\u95f4\u5185\u8fdb\u884c\u4e864\u6b21\u91cd\u8bd5\uff0c\u7136\u540e\u6210\u529f\u8fd4\u56de\u3002 \u8fd9\u6837\u867d\u7136\u770b\u8d77\u6765\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u5b9e\u8df5\u4e0a\uff0c\u7531\u4e8e\u6ca1\u6709\u91cd\u8bd5\u95f4\u9694\uff0c\u5f88\u53ef\u80fd\u5f53\u65f6\u4f9d\u8d56\u7684\u670d\u52a1\u5c1a\u672a\u4ece\u7f51\u7edc\u5f02\u5e38\u4e2d\u6062\u590d\u8fc7\u6765\uff0c\u6240\u4ee5\u6781\u6709\u53ef\u80fd\u63a5\u4e0b\u6765\u7684\u51e0\u6b21\u8c03\u7528\u90fd\u662f\u5931\u8d25\u7684\u3002 \u800c\u4e14\uff0c\u8fd9\u6837\u9700\u8981\u5bf9\u4ee3\u7801\u8fdb\u884c\u5927\u91cf\u7684\u4fb5\u5165\u5f0f\u4fee\u6539\uff0c\u663e\u7136\uff0c\u4e0d\u4f18\u96c5\u3002 3. \u4ee3\u7406\u6a21\u5f0f \u00b6 \u4e0a\u9762\u7684\u5904\u7406\u65b9\u5f0f\u7531\u4e8e\u9700\u8981\u5bf9\u4e1a\u52a1\u4ee3\u7801\u8fdb\u884c\u5927\u91cf\u4fee\u6539\uff0c\u867d\u7136\u5b9e\u73b0\u4e86\u529f\u80fd\uff0c\u4f46\u662f\u5bf9\u539f\u6709\u4ee3\u7801\u7684\u4fb5\u5165\u6027\u592a\u5f3a\uff0c\u53ef\u7ef4\u62a4\u6027\u5dee\u3002 \u6240\u4ee5\u9700\u8981\u4f7f\u7528\u4e00\u79cd\u66f4\u4f18\u96c5\u4e00\u70b9\u7684\u65b9\u5f0f\uff0c\u4e0d\u76f4\u63a5\u4fee\u6539\u4e1a\u52a1\u4ee3\u7801\uff0c\u90a3\u8981\u600e\u4e48\u505a\u5462\uff1f \u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u5728\u4e1a\u52a1\u4ee3\u7801\u7684\u5916\u9762\u518d\u5305\u4e00\u5c42\u5c31\u884c\u4e86\uff0c\u4ee3\u7406\u6a21\u5f0f\u5728\u8fd9\u91cc\u5c31\u6709\u7528\u6b66\u4e4b\u5730\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import lombok.extern.slf4j.Slf4j ; @Service @Slf4j public class HelloTetryProxyService { @Autowired private HelloService helloService ; public String hello () throws Exception { int maxRetryTimes = 4 ; String s = \"\" ; for ( int retry = 1 ; retry <= maxRetryTimes ; retry ++) { try { s = helloService . hello (); log . info ( \"helloService\u8fd4\u56de:{}\" , s ); return s ; } catch ( Exception e ) { log . info ( \"helloService.hello()\u8c03\u7528\u5931\u8d25, \u51c6\u5907\u91cd\u8bd5\" ); } } throw new Exception ( \"\u91cd\u8bd5\u6b21\u6570\u8017\u5c3d\" ); } } \u8fd9\u6837\uff0c\u91cd\u8bd5\u903b\u8f91\u5c31\u90fd\u7531\u4ee3\u7406\u7c7b\u6765\u5b8c\u6210\uff0c\u539f\u4e1a\u52a1\u7c7b\u7684\u903b\u8f91\u5c31\u4e0d\u9700\u8981\u4fee\u6539\u4e86\uff0c\u4ee5\u540e\u60f3\u4fee\u6539\u91cd\u8bd5\u903b\u8f91\u4e5f\u53ea\u9700\u8981\u4fee\u6539\u8fd9\u4e2a\u7c7b\u5c31\u884c\u4e86\uff0c\u5206\u5de5\u660e\u786e\u3002\u6bd4\u5982\uff0c\u73b0\u5728\u60f3\u8981\u5728\u91cd\u8bd5\u4e4b\u95f4\u52a0\u4e0a\u4e00\u4e2a\u5ef6\u8fdf\uff0c\u53ea\u9700\u8981\u505a\u4e00\u70b9\u70b9\u4fee\u6539\u5373\u53ef\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public String hello () throws Exception { int maxRetryTimes = 4 ; String s = \"\" ; for ( int retry = 1 ; retry <= maxRetryTimes ; retry ++) { try { s = helloService . hello (); log . info ( \"helloService\u8fd4\u56de:{}\" , s ); return s ; } catch ( Exception e ) { log . info ( \"helloService.hello()\u8c03\u7528\u5931\u8d25, \u51c6\u5907\u91cd\u8bd5\" ); } try { Thread . sleep ( 1000 ); } catch ( Exception e ) { e . printStackTrace (); } } throw new Exception ( \"\u91cd\u8bd5\u6b21\u6570\u8017\u5c3d\" ); } \u4ee3\u7406\u6a21\u5f0f\u867d\u7136\u8981\u66f4\u52a0\u4f18\u96c5\uff0c\u4f46\u662f\u5982\u679c\u4f9d\u8d56\u7684\u670d\u52a1\u5f88\u591a\u7684\u65f6\u5019\uff0c\u8981\u4e3a\u6bcf\u4e2a\u670d\u52a1\u90fd\u521b\u5efa\u4e00\u4e2a\u4ee3\u7406\u7c7b\uff0c\u663e\u7136\u8fc7\u4e8e\u9ebb\u70e6\uff0c\u800c\u4e14\u5176\u5b9e\u91cd\u8bd5\u7684\u903b\u8f91\u90fd\u5927\u540c\u5c0f\u5f02\uff0c\u65e0\u975e\u5c31\u662f\u91cd\u8bd5\u7684\u6b21\u6570\u548c\u5ef6\u65f6\u4e0d\u4e00\u6837\u800c\u5df2\u3002\u5982\u679c\u6bcf\u4e2a\u7c7b\u90fd\u5199\u8fd9\u4e48\u4e00\u957f\u4e32\u7c7b\u4f3c\u7684\u4ee3\u7801\uff0c\u663e\u7136\uff0c\u4e0d\u4f18\u96c5\uff01 4. JDK\u52a8\u6001\u4ee3\u7406 \u00b6 \u8fd9\u65f6\u5019\uff0c\u52a8\u6001\u4ee3\u7406\u5c31\u95ea\u4eae\u767b\u573a\u4e86\u3002\u53ea\u9700\u8981\u5199\u4e00\u4e2a\u4ee3\u7406\u5904\u7406\u7c7b\uff0c\u5c31\u53ef\u4ee5\u5f00\u5c40\u4e00\u6761\u72d7\uff0c\u780d\u5230\u4e5d\u5341\u4e5d\u3002 \u63a5\u53e3 1 2 3 4 5 6 7 public interface IService { public String hello () throws Exception ; } \u5b9e\u73b0\u7c7b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import java.time.LocalTime ; import java.util.concurrent.atomic.AtomicLong ; import org.springframework.stereotype.Service ; import lombok.extern.slf4j.Slf4j ; @Service @Slf4j public class HelloService implements IService { private static AtomicLong helloTimes = new AtomicLong (); @Override public String hello () throws Exception { long times = helloTimes . getAndIncrement (); if ( times % 4 != 0 ) { log . warn ( \"\u53d1\u751f\u5f02\u5e38, time: {}\" , LocalTime . now ()); throw new Exception ( \"\u53d1\u751fhello\u5f02\u5e38\" ); } return \"hello\" ; } } jdk\u52a8\u6001\u4ee3\u7406 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 import java.lang.reflect.InvocationHandler ; import java.lang.reflect.Method ; import java.lang.reflect.Proxy ; import java.time.LocalTime ; import lombok.extern.slf4j.Slf4j ; @Slf4j public class RetryInvocationHandler implements InvocationHandler { private final Object subject ; public RetryInvocationHandler ( Object subject ) { this . subject = subject ; } @Override public Object invoke ( Object proxy , Method method , Object [] args ) throws Throwable { int times = 0 ; while ( times <= 4 ) { try { return method . invoke ( subject , args ); } catch ( Exception e ) { times ++; log . info ( \"times:{},time:{}\" , times , LocalTime . now ()); if ( times > 4 ) { throw new Exception ( e ); } } Thread . sleep ( 1000 ); //\u5ef6\u65f61s } return null ; } /** * \u83b7\u53d6\u52a8\u6001\u4ee3\u7406 * @param realSubject * @return */ public static Object getProxy ( Object realSubject ) { InvocationHandler handler = new RetryInvocationHandler ( realSubject ); return Proxy . newProxyInstance ( handler . getClass (). getClassLoader (), realSubject . getClass (). getInterfaces (), handler ); } } \u6765\u4e00\u53d1\u5355\u5143\u6d4b\uff1a 1 2 3 4 5 6 7 8 9 @GetMapping ( \"dd\" ) public String getPrice ( Integer lastPrice ) throws Exception { HelloService helloService = new HelloService (); IService proxyService = ( IService ) RetryInvocationHandler . getProxy ( helloService ); String hello = proxyService . hello (); log . info ( \"hello:{}\" , hello ); return hello ; } 1 2 3 4 5 6 7 \u53d1\u751f\u5f02\u5e38, time: 14:51:39.167 times:1,time:14:51:39.167 \u53d1\u751f\u5f02\u5e38, time: 14:51:40.172 times:2,time:14:51:40.172 \u53d1\u751f\u5f02\u5e38, time: 14:51:41.176 times:3,time:14:51:41.177 hello:hello \u5728\u91cd\u8bd5\u4e864\u6b21\u4e4b\u540e\u8f93\u51fa\u4e86Hello\uff0c\u7b26\u5408\u9884\u671f\u3002 \u52a8\u6001\u4ee3\u7406\u53ef\u4ee5\u5c06\u91cd\u8bd5\u903b\u8f91\u90fd\u653e\u5230\u4e00\u5757\uff0c\u663e\u7136\u6bd4\u76f4\u63a5\u4f7f\u7528\u4ee3\u7406\u7c7b\u8981\u65b9\u4fbf\u5f88\u591a\uff0c\u4e5f\u66f4\u52a0\u4f18\u96c5\u3002 \u4e0d\u8fc7\u4e0d\u8981\u9ad8\u5174\u7684\u592a\u65e9\uff0c\u8fd9\u91cc\u56e0\u4e3a\u88ab\u4ee3\u7406\u7684HelloService\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u7c7b\uff0c\u6ca1\u6709\u4f9d\u8d56\u5176\u5b83\u7c7b\uff0c\u6240\u4ee5\u76f4\u63a5\u521b\u5efa\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u4f46\u5982\u679c\u88ab\u4ee3\u7406\u7684\u7c7b\u4f9d\u8d56\u4e86\u5176\u5b83\u88abSpring\u5bb9\u5668\u7ba1\u7406\u7684\u7c7b\uff0c\u5219\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u56e0\u4e3a\u6ca1\u6709\u628a\u88ab\u4f9d\u8d56\u7684\u5b9e\u4f8b\u6ce8\u5165\u5230\u521b\u5efa\u7684\u4ee3\u7406\u5b9e\u4f8b\u4e2d\u3002 \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c31\u6bd4\u8f83\u590d\u6742\u4e86\uff0c\u9700\u8981\u4eceSpring\u5bb9\u5668\u4e2d\u83b7\u53d6\u5df2\u7ecf\u88c5\u914d\u597d\u7684\uff0c\u9700\u8981\u88ab\u4ee3\u7406\u7684\u5b9e\u4f8b\uff0c\u7136\u540e\u4e3a\u5176\u521b\u5efa\u4ee3\u7406\u7c7b\u5b9e\u4f8b\uff0c\u5e76\u4ea4\u7ed9Spring\u5bb9\u5668\u6765\u7ba1\u7406\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u6bcf\u6b21\u90fd\u91cd\u65b0\u521b\u5efa\u65b0\u7684\u4ee3\u7406\u7c7b\u5b9e\u4f8b\u4e86\u3002 \u8bdd\u4e0d\u591a\u8bf4\uff0c\u64b8\u8d77\u8896\u5b50\u5c31\u662f\u5e72\u3002 \u5934\u6761\u539f\u6587 5. cglib \u00b6 6. Spring AOP \u00b6 \u60f3\u8981\u65e0\u4fb5\u5165\u5f0f\u7684\u4fee\u6539\u539f\u6709\u903b\u8f91\uff1f\u60f3\u8981\u4e00\u4e2a\u6ce8\u89e3\u5c31\u5b9e\u73b0\u91cd\u8bd5\uff1f\u7528Spring AOP\u4e0d\u5c31\u80fd\u5b8c\u7f8e\u5b9e\u73b0\u5417\uff1f\u4f7f\u7528AOP\u6765\u4e3a\u76ee\u6807\u8c03\u7528\u8bbe\u7f6e\u5207\u9762\uff0c\u5373\u53ef\u5728\u76ee\u6807\u65b9\u6cd5\u8c03\u7528\u524d\u540e\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u903b\u8f91\u3002 \u5148\u521b\u5efa\u4e00\u4e2a\u6ce8\u89e3\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import java.lang.annotation.Documented ; import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Target ( ElementType . METHOD ) @Retention ( RetentionPolicy . RUNTIME ) @Documented public @interface Retryable { int retryTimes () default 3 ; int retryInterval () default 1 ; } \u6709\u4e24\u4e2a\u53c2\u6570\uff0cretryTimes \u4ee3\u8868\u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0cretryInterval\u4ee3\u8868\u91cd\u8bd5\u95f4\u9694\u3002 \u7136\u540e\u5728\u9700\u8981\u91cd\u8bd5\u7684\u65b9\u6cd5\u4e0a\u52a0\u4e0a\u6ce8\u89e3\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import java.time.LocalTime ; import java.util.concurrent.atomic.AtomicLong ; import org.springframework.stereotype.Service ; import com.example.demo.anno.Retryable ; import lombok.extern.slf4j.Slf4j ; @Service @Slf4j public class HelloService { private static AtomicLong helloTimes = new AtomicLong (); @Retryable ( retryTimes = 4 , retryInterval = 2 ) public String hello () throws Exception { long times = helloTimes . getAndIncrement (); if ( times % 4 != 0 ) { log . warn ( \"\u53d1\u751f\u5f02\u5e38, time: {}\" , LocalTime . now ()); throw new Exception ( \"\u53d1\u751fhello\u5f02\u5e38\" ); } return \"hello\" ; } } \u63a5\u7740\uff0c\u8fdb\u884c\u6700\u540e\u4e00\u6b65\uff0c\u7f16\u5199AOP\u5207\u9762 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 import org.aspectj.lang.ProceedingJoinPoint ; import org.aspectj.lang.annotation.Around ; import org.aspectj.lang.annotation.Aspect ; import org.aspectj.lang.annotation.Pointcut ; import org.aspectj.lang.reflect.MethodSignature ; import org.springframework.stereotype.Component ; import com.example.demo.anno.Retryable ; import lombok.extern.slf4j.Slf4j ; @Component @Slf4j @Aspect public class RetryAspect { @Pointcut ( \"@annotation(com.example.demo.anno.Retryable)\" ) private void retryMethodCall () {} @Around ( \"retryMethodCall()\" ) public Object retry ( ProceedingJoinPoint joinPoint ) throws Exception { Retryable retryable = (( MethodSignature ) joinPoint . getSignature ()). getMethod (). getAnnotation ( Retryable . class ); int retryInterval = retryable . retryInterval (); int maxRetryTimes = retryable . retryTimes (); Throwable error = new RuntimeException (); for ( int retryTimes = 1 ; retryTimes <= maxRetryTimes ; retryTimes ++ ) { try { Object result = joinPoint . proceed (); return result ; } catch ( Throwable e ) { error = e ; log . warn ( \"\u8c03\u7528\u53d1\u751f\u5f02\u5e38\uff0c\u5f00\u59cb\u91cd\u8bd5\u3002retryTimes:{}\" , retryTimes ); } Thread . sleep ( retryInterval * 1000 ); } throw new Exception ( \"\u91cd\u8bd5\u6b21\u6570\u8017\u5c3d\" , error ); } } \u5f00\u59cb\u6d4b\u8bd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 @Autowired private HelloService helloService ; @GetMapping ( \"dd\" ) public String getPrice ( Integer lastPrice ) throws Exception { return helloService . hello (); } 1 2 3 4 5 6 7 Completed initialization in 7 ms \u53d1\u751f\u5f02\u5e38, time: 16:36:15.416 \u8c03\u7528\u53d1\u751f\u5f02\u5e38\uff0c\u5f00\u59cb\u91cd\u8bd5\u3002retryTimes:1 \u53d1\u751f\u5f02\u5e38, time: 16:36:17.421 \u8c03\u7528\u53d1\u751f\u5f02\u5e38\uff0c\u5f00\u59cb\u91cd\u8bd5\u3002retryTimes:2 \u53d1\u751f\u5f02\u5e38, time: 16:36:19.427 \u8c03\u7528\u53d1\u751f\u5f02\u5e38\uff0c\u5f00\u59cb\u91cd\u8bd5\u3002retryTimes:3 \u8fd9\u6837\u5c31\u76f8\u5f53\u4f18\u96c5\u4e86\uff0c\u4e00\u4e2a\u6ce8\u89e3\u5c31\u80fd\u641e\u5b9a\u91cd\u8bd5\uff0c\u7b80\u76f4\u4e0d\u8981\u66f4\u68d2\u3002 7. Spring \u7684\u91cd\u8bd5\u6ce8\u89e3 \u00b6 \u5b9e\u9645\u4e0aSpring\u4e2d\u5c31\u6709\u6bd4\u8f83\u5b8c\u5584\u7684\u91cd\u8bd5\u673a\u5236\uff0c\u6bd4\u4e0a\u9762\u7684\u5207\u9762\u66f4\u52a0\u597d\u7528\uff0c\u8fd8\u4e0d\u9700\u8981\u81ea\u5df1\u52a8\u624b\u91cd\u65b0\u9020\u8f6e\u5b50\u3002 \u90a3\u8ba9\u6211\u4eec\u5148\u6765\u770b\u770b\u8fd9\u4e2a\u8f6e\u5b50\u7a76\u7adf\u597d\u4e0d\u597d\u4f7f\u3002 \u5148\u5f15\u5165\u91cd\u8bd5\u6240\u9700\u7684jar\u5305 1 2 3 4 5 6 7 8 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-aop </artifactId> </dependency> <dependency> <groupId> org.springframework.retry </groupId> <artifactId> spring-retry </artifactId> </dependency> \u7136\u540e\u5728\u542f\u52a8\u7c7b\u6216\u8005\u914d\u7f6e\u7c7b\u4e0a\u6dfb\u52a0@EnableRetry\u6ce8\u89e3\uff0c\u63a5\u4e0b\u6765\u5728\u9700\u8981\u91cd\u8bd5\u7684\u65b9\u6cd5\u4e0a\u6dfb\u52a0@Retryable\u6ce8\u89e3\uff08\u55ef\uff1f\u597d\u50cf\u8ddf\u6211\u81ea\u5b9a\u4e49\u7684\u6ce8\u89e3\u4e00\u6837\uff1f\u7adf\u7136\u6284\u88ad\u6211\u7684\u6ce8\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import java.time.LocalTime ; import java.util.concurrent.atomic.AtomicLong ; import org.springframework.retry.annotation.Backoff ; import org.springframework.retry.annotation.Retryable ; import org.springframework.stereotype.Service ; import lombok.extern.slf4j.Slf4j ; @Service @Slf4j public class HelloService { private static AtomicLong helloTimes = new AtomicLong (); @Retryable ( maxAttempts = 5 , backoff = @Backoff ( delay = 1000 , multiplier = 2 )) public String hello () throws Exception { long times = helloTimes . getAndIncrement (); if ( times % 4 != 0 ) { log . warn ( \"\u53d1\u751f\u5f02\u5e38, time: {}\" , LocalTime . now ()); throw new Exception ( \"\u53d1\u751fhello\u5f02\u5e38\" ); } return \"hello\" ; } } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f1a\u91cd\u8bd5\u4e09\u6b21\uff0c\u91cd\u8bd5\u95f4\u9694\u4e3a1\u79d2\u3002\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u91cd\u8bd5\u6b21\u6570\u548c\u95f4\u9694\u3002\u8fd9\u6837\u5c31\u8ddf\u6211\u524d\u9762\u5b9e\u73b0\u7684\u529f\u80fd\u662f\u4e00\u6bdb\u4e00\u6837\u7684\u4e86\u3002 \u4f46Spring\u91cc\u7684\u91cd\u8bd5\u673a\u5236\u8fd8\u652f\u6301\u5f88\u591a\u5f88\u6709\u7528\u7684\u7279\u6027\uff0c\u6bd4\u5982\u8bf4\uff0c\u53ef\u4ee5\u6307\u5b9a\u53ea\u5bf9\u7279\u5b9a\u7c7b\u578b\u7684\u5f02\u5e38\u8fdb\u884c\u91cd\u8bd5\uff0c\u8fd9\u6837\u5982\u679c\u629b\u51fa\u7684\u662f\u5176\u5b83\u7c7b\u578b\u7684\u5f02\u5e38\u5219\u4e0d\u4f1a\u8fdb\u884c\u91cd\u8bd5\uff0c\u5c31\u53ef\u4ee5\u5bf9\u91cd\u8bd5\u8fdb\u884c\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\u3002\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u4f1a\u5bf9\u6240\u6709\u5f02\u5e38\u90fd\u91cd\u8bd5\u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528include\u548cexclude\u6765\u6307\u5b9a\u5305\u542b\u6216\u8005\u6392\u9664\u54ea\u4e9b\u5f02\u5e38\u8fdb\u884c\u91cd\u8bd5\u3002 \u53ef\u4ee5\u7528maxAttemps\u6307\u5b9a\u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a3\u6b21\u3002 \u53ef\u4ee5\u7528interceptor\u8bbe\u7f6e\u91cd\u8bd5\u62e6\u622a\u5668\u7684bean\u540d\u79f0\u3002 \u53ef\u4ee5\u901a\u8fc7label\u8bbe\u7f6e\u8be5\u91cd\u8bd5\u7684\u552f\u4e00\u6807\u5fd7\uff0c\u7528\u4e8e\u7edf\u8ba1\u8f93\u51fa\u3002 \u53ef\u4ee5\u4f7f\u7528exceptionExpression\u6765\u6dfb\u52a0\u5f02\u5e38\u8868\u8fbe\u5f0f\uff0c\u5728\u629b\u51fa\u5f02\u5e38\u540e\u6267\u884c\uff0c\u4ee5\u5224\u65ad\u540e\u7eed\u662f\u5426\u8fdb\u884c\u91cd\u8bd5\u3002 \u6b64\u5916\uff0cSpring\u4e2d\u7684\u91cd\u8bd5\u673a\u5236\u8fd8\u652f\u6301\u4f7f\u7528backoff\u6765\u8bbe\u7f6e\u91cd\u8bd5\u8865\u507f\u673a\u5236\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u91cd\u8bd5\u95f4\u9694\uff0c\u5e76\u4e14\u652f\u6301\u8bbe\u7f6e\u91cd\u8bd5\u5ef6\u8fdf\u500d\u6570\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a \u8be5\u65b9\u6cd5\u8c03\u7528\u5c06\u4f1a\u5728\u629b\u51faHelloRetryException\u5f02\u5e38\u540e\u8fdb\u884c\u91cd\u8bd5\uff0c\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u4e3a5\uff0c\u7b2c\u4e00\u6b21\u91cd\u8bd5\u95f4\u9694\u4e3a1s\uff0c\u4e4b\u540e\u4ee52\u500d\u5927\u5c0f\u8fdb\u884c\u9012\u589e\uff0c\u7b2c\u4e8c\u6b21\u91cd\u8bd5\u95f4\u9694\u4e3a2s\uff0c\u7b2c\u4e09\u6b21\u4e3a4s\uff0c\u7b2c\u56db\u6b21\u4e3a8s\u3002 \u91cd\u8bd5\u673a\u5236\u8fd8\u652f\u6301\u4f7f\u7528@Recover \u6ce8\u89e3\u6765\u8fdb\u884c\u5584\u540e\u5de5\u4f5c\uff0c\u5f53\u91cd\u8bd5\u8fbe\u5230\u6307\u5b9a\u6b21\u6570\u4e4b\u540e\uff0c\u5c06\u4f1a\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728\u8be5\u65b9\u6cd5\u4e2d\u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55\u7b49\u64cd\u4f5c\u3002 \u8fd9\u91cc\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u60f3\u8981@Recover \u6ce8\u89e3\u751f\u6548\u7684\u8bdd\uff0c\u9700\u8981\u8ddf\u88ab@Retryable \u6807\u8bb0\u7684\u65b9\u6cd5\u5728\u540c\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u4e14\u88ab@Retryable \u6807\u8bb0\u7684\u65b9\u6cd5\u4e0d\u80fd\u6709\u8fd4\u56de\u503c\uff0c\u5426\u5219\u4e0d\u4f1a\u751f\u6548\u3002 \u5e76\u4e14\u5982\u679c\u4f7f\u7528\u4e86@Recover\u6ce8\u89e3\u7684\u8bdd\uff0c\u91cd\u8bd5\u6b21\u6570\u8fbe\u5230\u6700\u5927\u6b21\u6570\u540e\uff0c\u5982\u679c\u5728@Recover\u6807\u8bb0\u7684\u65b9\u6cd5\u4e2d\u65e0\u5f02\u5e38\u629b\u51fa\uff0c\u662f\u4e0d\u4f1a\u629b\u51fa\u539f\u5f02\u5e38\u7684 \u9664\u4e86\u4f7f\u7528\u6ce8\u89e3\u5916\uff0cSpring Retry \u4e5f\u652f\u6301\u76f4\u63a5\u5728\u8c03\u7528\u65f6\u4f7f\u7528\u4ee3\u7801\u8fdb\u884c\u91cd\u8bd5\uff1a \u6b64\u65f6\u552f\u4e00\u7684\u597d\u5904\u662f\u53ef\u4ee5\u8bbe\u7f6e\u591a\u79cd\u91cd\u8bd5\u7b56\u7565\uff1a \u53ef\u4ee5\u770b\u51fa\uff0cSpring\u4e2d\u7684\u91cd\u8bd5\u673a\u5236\u8fd8\u662f\u76f8\u5f53\u5b8c\u5584\u7684\uff0c\u6bd4\u4e0a\u9762\u81ea\u5df1\u5199\u7684AOP\u5207\u9762\u529f\u80fd\u66f4\u52a0\u5f3a\u5927\u3002 \u8fd9\u91cc\u8fd8\u9700\u8981\u518d\u63d0\u9192\u7684\u4e00\u70b9\u662f\uff0c\u7531\u4e8eSpring Retry\u7528\u5230\u4e86Aspect\u589e\u5f3a\uff0c\u6240\u4ee5\u5c31\u4f1a\u6709\u4f7f\u7528Aspect\u4e0d\u53ef\u907f\u514d\u7684\u5751\u2014\u2014\u65b9\u6cd5\u5185\u90e8\u8c03\u7528\uff0c\u5982\u679c\u88ab @Retryable \u6ce8\u89e3\u7684\u65b9\u6cd5\u7684\u8c03\u7528\u65b9\u548c\u88ab\u8c03\u7528\u65b9\u5904\u4e8e\u540c\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u90a3\u4e48\u91cd\u8bd5\u5c06\u4f1a\u5931\u6548\u3002 \u4f46\u4e5f\u8fd8\u662f\u5b58\u5728\u4e00\u5b9a\u7684\u4e0d\u8db3\uff0cSpring\u7684\u91cd\u8bd5\u673a\u5236\u53ea\u652f\u6301\u5bf9\u5f02\u5e38\u8fdb\u884c\u6355\u83b7\uff0c\u800c\u65e0\u6cd5\u5bf9\u8fd4\u56de\u503c\u8fdb\u884c\u6821\u9a8c\u3002 \u53ef\u4ee5\u770b\u51fa\uff0cSpring\u4e2d\u7684\u91cd\u8bd5\u673a\u5236\u8fd8\u662f\u76f8\u5f53\u5b8c\u5584\u7684\uff0c\u6bd4\u4e0a\u9762\u81ea\u5df1\u5199\u7684AOP\u5207\u9762\u529f\u80fd\u66f4\u52a0\u5f3a\u5927\u3002 \u8fd9\u91cc\u8fd8\u9700\u8981\u518d\u63d0\u9192\u7684\u4e00\u70b9\u662f\uff0c\u7531\u4e8eSpring Retry\u7528\u5230\u4e86Aspect\u589e\u5f3a\uff0c\u6240\u4ee5\u5c31\u4f1a\u6709\u4f7f\u7528Aspect\u4e0d\u53ef\u907f\u514d\u7684\u5751\u2014\u2014\u65b9\u6cd5\u5185\u90e8\u8c03\u7528\uff0c\u5982\u679c\u88ab @Retryable \u6ce8\u89e3\u7684\u65b9\u6cd5\u7684\u8c03\u7528\u65b9\u548c\u88ab\u8c03\u7528\u65b9\u5904\u4e8e\u540c\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u90a3\u4e48\u91cd\u8bd5\u5c06\u4f1a\u5931\u6548\u3002 \u4f46\u4e5f\u8fd8\u662f\u5b58\u5728\u4e00\u5b9a\u7684\u4e0d\u8db3\uff0cSpring\u7684\u91cd\u8bd5\u673a\u5236\u53ea\u652f\u6301\u5bf9\u5f02\u5e38\u8fdb\u884c\u6355\u83b7\uff0c\u800c\u65e0\u6cd5\u5bf9\u8fd4\u56de\u503c\u8fdb\u884c\u6821\u9a8c\u3002 8. Guava Retry \u00b6 \u6700\u540e\uff0c\u518d\u4ecb\u7ecd\u53e6\u4e00\u4e2a\u91cd\u8bd5\u5229\u5668\u2014\u2014Guava Retry\u3002 \u76f8\u6bd4Spring Retry\uff0cGuava Retry\u5177\u6709\u66f4\u5f3a\u7684\u7075\u6d3b\u6027\uff0c\u53ef\u4ee5\u6839\u636e\u8fd4\u56de\u503c\u6821\u9a8c\u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u8fdb\u884c\u91cd\u8bd5\u3002 \u5148\u6765\u770b\u4e00\u4e2a\u5c0f\u6817\u5b50\uff1a \u5148\u5f15\u5165jar\u5305\uff1a 1 2 3 4 5 <dependency> <groupId> com.github.rholder </groupId> <artifactId> guava-retrying </artifactId> <version> 2.0.0 </version> </dependency> \u7136\u540e\u7528\u4e00\u4e2a\u5c0fDemo\u6765\u611f\u53d7\u4e00\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 Retryer < String > retryer = RetryerBuilder .< String > newBuilder () . retryIfExceptionOfType ( Exception . class ) . retryIfResult ( StringUtils :: isEmpty ) . withWaitStrategy ( WaitStrategies . fixedWait ( 3 , TimeUnit . SECONDS )) . withStopStrategy ( StopStrategies . stopAfterAttempt ( 3 )) . build (); return retryer . call (()-> helloService . hello ()); \u5148\u521b\u5efa\u4e00\u4e2aRetryer\u5b9e\u4f8b\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e2a\u5b9e\u4f8b\u5bf9\u9700\u8981\u91cd\u8bd5\u7684\u65b9\u6cd5\u8fdb\u884c\u8c03\u7528\uff0c\u53ef\u4ee5\u901a\u8fc7\u5f88\u591a\u65b9\u6cd5\u6765\u8bbe\u7f6e\u91cd\u8bd5\u673a\u5236\uff0c\u6bd4\u5982\u4f7f\u7528retryIfException\u6765\u5bf9\u6240\u6709\u5f02\u5e38\u8fdb\u884c\u91cd\u8bd5\uff0c\u4f7f\u7528retryIfExceptionOfType\u65b9\u6cd5\u6765\u8bbe\u7f6e\u5bf9\u6307\u5b9a\u5f02\u5e38\u8fdb\u884c\u91cd\u8bd5\uff0c\u4f7f\u7528retryIfResult\u6765\u5bf9\u4e0d\u7b26\u5408\u9884\u671f\u7684\u8fd4\u56de\u7ed3\u679c\u8fdb\u884c\u91cd\u8bd5\uff0c\u4f7f\u7528retryIfRuntimeException\u65b9\u6cd5\u6765\u5bf9\u6240\u6709RuntimeException\u8fdb\u884c\u91cd\u8bd5\u3002 \u8fd8\u6709\u4e94\u4e2a\u4ee5with\u5f00\u5934\u7684\u65b9\u6cd5\uff0c\u7528\u6765\u5bf9\u91cd\u8bd5\u7b56\u7565/\u7b49\u5f85\u7b56\u7565/\u963b\u585e\u7b56\u7565/\u5355\u6b21\u4efb\u52a1\u6267\u884c\u65f6\u95f4\u9650\u5236/\u81ea\u5b9a\u4e49\u76d1\u542c\u5668\u8fdb\u884c\u8bbe\u7f6e\uff0c\u4ee5\u5b9e\u73b0\u66f4\u52a0\u5f3a\u5927\u7684\u5f02\u5e38\u5904\u7406\u3002 \u901a\u8fc7\u8ddfSpring AOP\u7684\u7ed3\u5408\uff0c\u53ef\u4ee5\u5b9e\u73b0\u6bd4Spring Retry\u66f4\u52a0\u5f3a\u5927\u7684\u91cd\u8bd5\u529f\u80fd\u3002 \u4ed4\u7ec6\u5bf9\u6bd4\u4e4b\u4e0b\uff0cGuava Retry\u53ef\u4ee5\u63d0\u4f9b\u7684\u7279\u6027\u6709\uff1a \u53ef\u4ee5\u8bbe\u7f6e\u4efb\u52a1\u5355\u6b21\u6267\u884c\u7684\u65f6\u95f4\u9650\u5236\uff0c\u5982\u679c\u8d85\u65f6\u5219\u629b\u51fa\u5f02\u5e38\u3002 \u53ef\u4ee5\u8bbe\u7f6e\u91cd\u8bd5\u76d1\u542c\u5668\uff0c\u7528\u6765\u6267\u884c\u989d\u5916\u7684\u5904\u7406\u5de5\u4f5c\u3002 \u53ef\u4ee5\u8bbe\u7f6e\u4efb\u52a1\u963b\u585e\u7b56\u7565\uff0c\u5373\u53ef\u4ee5\u8bbe\u7f6e\u5f53\u524d\u91cd\u8bd5\u5b8c\u6210\uff0c\u4e0b\u6b21\u91cd\u8bd5\u5f00\u59cb\u524d\u7684\u8fd9\u6bb5\u65f6\u95f4\u505a\u4ec0\u4e48\u4e8b\u60c5\u3002 \u53ef\u4ee5\u901a\u8fc7\u505c\u6b62\u91cd\u8bd5\u7b56\u7565\u548c\u7b49\u5f85\u7b56\u7565\u7ed3\u5408\u4f7f\u7528\u6765\u8bbe\u7f6e\u66f4\u52a0\u7075\u6d3b\u7684\u7b56\u7565\uff0c\u6bd4\u5982\u6307\u6570\u7b49\u5f85\u65f6\u957f\u5e76\u6700\u591a10\u6b21\u8c03\u7528\uff0c\u968f\u673a\u7b49\u5f85\u65f6\u957f\u5e76\u6c38\u4e0d\u505c\u6b62\u7b49\u7b49\u3002 9. \u603b\u7ed3 \u00b6 \u672c\u6587\u7531\u6d45\u5165\u6df1\u7684\u5bf9\u591a\u79cd\u91cd\u8bd5\u7684\u59ff\u52bf\u8fdb\u884c\u4e86360\u5ea6\u65e0\u6b7b\u89d2\u6559\u5b66\uff0c\u4ece\u6700\u7b80\u5355\u7684\u624b\u52a8\u91cd\u8bd5\uff0c\u5230\u4f7f\u7528\u9759\u6001\u4ee3\u7406\uff0c\u518d\u5230JDK\u52a8\u6001\u4ee3\u7406\u548cCGLib\u52a8\u6001\u4ee3\u7406\uff0c\u518d\u5230Spring AOP\uff0c\u90fd\u662f\u624b\u5de5\u9020\u8f6e\u5b50\u7684\u8fc7\u7a0b\uff0c\u6700\u540e\u4ecb\u7ecd\u4e86\u4e24\u79cd\u76ee\u524d\u6bd4\u8f83\u597d\u7528\u7684\u8f6e\u5b50\uff0c\u4e00\u4e2a\u662fSpring Retry\uff0c\u4f7f\u7528\u8d77\u6765\u7b80\u5355\u7c97\u66b4\uff0c\u4e0eSpring\u6846\u67b6\u5929\u751f\u642d\u914d\uff0c\u4e00\u4e2a\u6ce8\u89e3\u641e\u5b9a\u6240\u6709\u4e8b\u60c5\uff0c\u53e6\u4e00\u4e2a\u4fbf\u662fGuava Retry\uff0c\u4e0d\u4f9d\u8d56\u4e8eSpring\u6846\u67b6\uff0c\u81ea\u6210\u4f53\u7cfb\uff0c\u4f7f\u7528\u8d77\u6765\u66f4\u52a0\u7075\u6d3b\u5f3a\u5927\u3002 \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u5927\u90e8\u5206\u573a\u666f\u4e0b\uff0cSpring Retry\u63d0\u4f9b\u7684\u91cd\u8bd5\u673a\u5236\u5df2\u7ecf\u8db3\u591f\u5f3a\u5927\uff0c\u5982\u679c\u4e0d\u9700\u8981Guava Retry\u63d0\u4f9b\u7684\u989d\u5916\u7075\u6d3b\u6027\uff0c\u4f7f\u7528Spring Retry\u5c31\u5f88\u68d2\u4e86\u3002\u5f53\u7136\uff0c\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\uff0c\u4f46\u6ca1\u6709\u5fc5\u8981\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u9f13\u52b1\u91cd\u590d\u9020\u8f6e\u5b50\uff0c\u5148\u628a\u522b\u4eba\u7684\u8f6e\u5b50\u7814\u7a76\u6e05\u695a\u518d\u60f3\u60f3\u8fd8\u7528\u4e0d\u7528\u81ea\u5df1\u52a8\u624b\u3002 \u672c\u6587\u5230\u6b64\u5c31\u544a\u4e00\u6bb5\u843d\u4e86\uff0c\u53c8\u7528\u4e86\u4e00\u5929\u7684\u65f6\u95f4\u5b8c\u6210\u4e86\u5b8c\u6210\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u5199\u4f5c\u7684\u76ee\u7684\u5728\u4e8e\u603b\u7ed3\u548c\u5206\u4eab\uff0c\u6211\u76f8\u4fe1\u6700\u4f73\u5b9e\u8df5\u662f\u53ef\u4ee5\u603b\u7ed3\u548c\u79ef\u7d2f\u4e0b\u6765\u7684\uff0c\u5728\u5927\u591a\u6570\u573a\u666f\u4e0b\u90fd\u662f\u9002\u7528\u7684\uff0c\u8fd9\u4e9b\u6700\u4f73\u5b9e\u8df5\u4f1a\u5728\u9010\u6e10\u7684\u79ef\u7d2f\u8fc7\u7a0b\u4e2d\uff0c\u6210\u4e3a\u6bd4\u7ecf\u9a8c\u66f4\u4e3a\u91cd\u8981\u7684\u4e1c\u897f\u3002\u56e0\u4e3a\u7ecf\u9a8c\u4e0d\u603b\u7ed3\u5c31\u4f1a\u5fd8\u8bb0\uff0c\u800c\u603b\u7ed3\u51fa\u6765\u7684\u5185\u5bb9\u5374\u4e0d\u4f1a\u88ab\u4e22\u5931\u3002","title":"\u4f18\u96c5\u7684\u8fdb\u884c\u91cd\u8bd5"},{"location":"retry/#_1","text":"","title":"\u3010\u6700\u4f73\u5b9e\u8df5\u3011\u7a0b\u5e8f\u5458\u5982\u4f55\u4f18\u96c5\u7684\u8fdb\u884c\u91cd\u8bd5"},{"location":"retry/#1","text":"\u6700\u8fd1\u516c\u53f8\u5728\u641e\u6d3b\u52a8\uff0c\u9700\u8981\u4f9d\u8d56\u4e00\u4e2a\u7b2c\u4e09\u65b9\u63a5\u53e3\uff0c\u6d4b\u8bd5\u9636\u6bb5\u5e76\u6ca1\u6709\u4ec0\u4e48\u5f02\u5e38\u72b6\u51b5\uff0c\u4f46\u4e0a\u7ebf\u540e\u53d1\u73b0\u4f9d\u8d56\u7684\u63a5\u53e3\u6709\u65f6\u5019\u4f1a\u56e0\u4e3a\u5185\u90e8\u9519\u8bef\u800c\u8fd4\u56de\u7cfb\u7edf\u5f02\u5e38\uff0c\u867d\u7136\u6982\u7387\u4e0d\u5927\uff0c\u4f46\u603b\u56e0\u4e3a\u8fd9\u4e2a\u800c\u62a5\u8b66\u603b\u662f\u4e0d\u597d\u7684\uff0c\u4f55\u51b5\u6b7b\u4fe1\u961f\u5217\u7684\u6d88\u606f\u8fd8\u9700\u8981\u9ebb\u70e6\u8fd0\u7ef4\u8fdb\u884c\u91cd\u65b0\u6295\u9012\uff0c\u6240\u4ee5\u52a0\u4e0a\u91cd\u8bd5\u673a\u5236\u52bf\u5728\u5fc5\u884c\u3002 \u91cd\u8bd5\u673a\u5236\u53ef\u4ee5\u4fdd\u62a4\u7cfb\u7edf\u51cf\u5c11\u56e0\u7f51\u7edc\u6ce2\u52a8\u3001\u4f9d\u8d56\u670d\u52a1\u77ed\u6682\u6027\u4e0d\u53ef\u7528\u5e26\u6765\u7684\u5f71\u54cd\uff0c\u8ba9\u7cfb\u7edf\u80fd\u66f4\u7a33\u5b9a\u7684\u8fd0\u884c\u7684\u4e00\u79cd\u4fdd\u62a4\u673a\u5236\u3002\u8ba9\u4f60\u539f\u672c\u5c31\u7a33\u5982\u72d7\u7684\u7cfb\u7edf\u66f4\u662f\u7a33\u4e0a\u52a0\u7a33\u3002 \u4e3a\u4e86\u65b9\u4fbf\u8bf4\u660e\uff0c\u5148\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u8fdb\u884c\u91cd\u8bd5\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import java.time.LocalTime ; import java.util.concurrent.atomic.AtomicLong ; import org.springframework.stereotype.Service ; import lombok.extern.slf4j.Slf4j ; @Service @Slf4j public class HelloService { private static AtomicLong helloTimes = new AtomicLong (); public String hello () throws Exception { long times = helloTimes . getAndIncrement (); if ( times % 4 != 0 ) { log . warn ( \"\u53d1\u751f\u5f02\u5e38, time: {}\" , LocalTime . now ()); throw new Exception ( \"\u53d1\u751fhello\u5f02\u5e38\" ); } return \"hello\" ; } } \u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u63a5\u53e3\u6bcf\u8c034\u6b21\u624d\u4f1a\u6210\u529f\u4e00\u6b21\u3002","title":"1. \u8bf4\u660e"},{"location":"retry/#2","text":"\u5148\u6765\u7528\u6700\u786c\u6838\u4e5f\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u5728\u8c03\u7528\u7684\u65f6\u5019\u8fdb\u91cd\u8bd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public String getPrice ( Integer lastPrice ) throws Exception { int maxRetryTimes = 4 ; String s = \"\" ; for ( int i = 1 ; i <= maxRetryTimes ; i ++) { try { s = helloService . hello (); log . info ( \"helloService\u8fd4\u56de:{}\" , s ); return s ; } catch ( Exception e ) { log . info ( \"helloService.hello()\u8c03\u7528\u5931\u8d25\uff0c\u51c6\u5907\u91cd\u8bd5\" ); } } throw new Exception ( \"\u91cd\u8bd5\u6b21\u6570\u8017\u5c3d\" ); } 1 2 3 4 5 6 7 \u53d1\u751f\u5f02\u5e38, time: 13:53:40.841 helloService.hello()\u8c03\u7528\u5931\u8d25\uff0c\u51c6\u5907\u91cd\u8bd5 \u53d1\u751f\u5f02\u5e38, time: 13:53:40.841 helloService.hello()\u8c03\u7528\u5931\u8d25\uff0c\u51c6\u5907\u91cd\u8bd5 \u53d1\u751f\u5f02\u5e38, time: 13:53:40.842 helloService.hello()\u8c03\u7528\u5931\u8d25\uff0c\u51c6\u5907\u91cd\u8bd5 helloService\u8fd4\u56de:hello \u7a0b\u5e8f\u5728\u6781\u77ed\u7684\u65f6\u95f4\u5185\u8fdb\u884c\u4e864\u6b21\u91cd\u8bd5\uff0c\u7136\u540e\u6210\u529f\u8fd4\u56de\u3002 \u8fd9\u6837\u867d\u7136\u770b\u8d77\u6765\u53ef\u4ee5\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u5b9e\u8df5\u4e0a\uff0c\u7531\u4e8e\u6ca1\u6709\u91cd\u8bd5\u95f4\u9694\uff0c\u5f88\u53ef\u80fd\u5f53\u65f6\u4f9d\u8d56\u7684\u670d\u52a1\u5c1a\u672a\u4ece\u7f51\u7edc\u5f02\u5e38\u4e2d\u6062\u590d\u8fc7\u6765\uff0c\u6240\u4ee5\u6781\u6709\u53ef\u80fd\u63a5\u4e0b\u6765\u7684\u51e0\u6b21\u8c03\u7528\u90fd\u662f\u5931\u8d25\u7684\u3002 \u800c\u4e14\uff0c\u8fd9\u6837\u9700\u8981\u5bf9\u4ee3\u7801\u8fdb\u884c\u5927\u91cf\u7684\u4fb5\u5165\u5f0f\u4fee\u6539\uff0c\u663e\u7136\uff0c\u4e0d\u4f18\u96c5\u3002","title":"2. \u624b\u52a8\u91cd\u8bd5"},{"location":"retry/#3","text":"\u4e0a\u9762\u7684\u5904\u7406\u65b9\u5f0f\u7531\u4e8e\u9700\u8981\u5bf9\u4e1a\u52a1\u4ee3\u7801\u8fdb\u884c\u5927\u91cf\u4fee\u6539\uff0c\u867d\u7136\u5b9e\u73b0\u4e86\u529f\u80fd\uff0c\u4f46\u662f\u5bf9\u539f\u6709\u4ee3\u7801\u7684\u4fb5\u5165\u6027\u592a\u5f3a\uff0c\u53ef\u7ef4\u62a4\u6027\u5dee\u3002 \u6240\u4ee5\u9700\u8981\u4f7f\u7528\u4e00\u79cd\u66f4\u4f18\u96c5\u4e00\u70b9\u7684\u65b9\u5f0f\uff0c\u4e0d\u76f4\u63a5\u4fee\u6539\u4e1a\u52a1\u4ee3\u7801\uff0c\u90a3\u8981\u600e\u4e48\u505a\u5462\uff1f \u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u5728\u4e1a\u52a1\u4ee3\u7801\u7684\u5916\u9762\u518d\u5305\u4e00\u5c42\u5c31\u884c\u4e86\uff0c\u4ee3\u7406\u6a21\u5f0f\u5728\u8fd9\u91cc\u5c31\u6709\u7528\u6b66\u4e4b\u5730\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.stereotype.Service ; import lombok.extern.slf4j.Slf4j ; @Service @Slf4j public class HelloTetryProxyService { @Autowired private HelloService helloService ; public String hello () throws Exception { int maxRetryTimes = 4 ; String s = \"\" ; for ( int retry = 1 ; retry <= maxRetryTimes ; retry ++) { try { s = helloService . hello (); log . info ( \"helloService\u8fd4\u56de:{}\" , s ); return s ; } catch ( Exception e ) { log . info ( \"helloService.hello()\u8c03\u7528\u5931\u8d25, \u51c6\u5907\u91cd\u8bd5\" ); } } throw new Exception ( \"\u91cd\u8bd5\u6b21\u6570\u8017\u5c3d\" ); } } \u8fd9\u6837\uff0c\u91cd\u8bd5\u903b\u8f91\u5c31\u90fd\u7531\u4ee3\u7406\u7c7b\u6765\u5b8c\u6210\uff0c\u539f\u4e1a\u52a1\u7c7b\u7684\u903b\u8f91\u5c31\u4e0d\u9700\u8981\u4fee\u6539\u4e86\uff0c\u4ee5\u540e\u60f3\u4fee\u6539\u91cd\u8bd5\u903b\u8f91\u4e5f\u53ea\u9700\u8981\u4fee\u6539\u8fd9\u4e2a\u7c7b\u5c31\u884c\u4e86\uff0c\u5206\u5de5\u660e\u786e\u3002\u6bd4\u5982\uff0c\u73b0\u5728\u60f3\u8981\u5728\u91cd\u8bd5\u4e4b\u95f4\u52a0\u4e0a\u4e00\u4e2a\u5ef6\u8fdf\uff0c\u53ea\u9700\u8981\u505a\u4e00\u70b9\u70b9\u4fee\u6539\u5373\u53ef\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public String hello () throws Exception { int maxRetryTimes = 4 ; String s = \"\" ; for ( int retry = 1 ; retry <= maxRetryTimes ; retry ++) { try { s = helloService . hello (); log . info ( \"helloService\u8fd4\u56de:{}\" , s ); return s ; } catch ( Exception e ) { log . info ( \"helloService.hello()\u8c03\u7528\u5931\u8d25, \u51c6\u5907\u91cd\u8bd5\" ); } try { Thread . sleep ( 1000 ); } catch ( Exception e ) { e . printStackTrace (); } } throw new Exception ( \"\u91cd\u8bd5\u6b21\u6570\u8017\u5c3d\" ); } \u4ee3\u7406\u6a21\u5f0f\u867d\u7136\u8981\u66f4\u52a0\u4f18\u96c5\uff0c\u4f46\u662f\u5982\u679c\u4f9d\u8d56\u7684\u670d\u52a1\u5f88\u591a\u7684\u65f6\u5019\uff0c\u8981\u4e3a\u6bcf\u4e2a\u670d\u52a1\u90fd\u521b\u5efa\u4e00\u4e2a\u4ee3\u7406\u7c7b\uff0c\u663e\u7136\u8fc7\u4e8e\u9ebb\u70e6\uff0c\u800c\u4e14\u5176\u5b9e\u91cd\u8bd5\u7684\u903b\u8f91\u90fd\u5927\u540c\u5c0f\u5f02\uff0c\u65e0\u975e\u5c31\u662f\u91cd\u8bd5\u7684\u6b21\u6570\u548c\u5ef6\u65f6\u4e0d\u4e00\u6837\u800c\u5df2\u3002\u5982\u679c\u6bcf\u4e2a\u7c7b\u90fd\u5199\u8fd9\u4e48\u4e00\u957f\u4e32\u7c7b\u4f3c\u7684\u4ee3\u7801\uff0c\u663e\u7136\uff0c\u4e0d\u4f18\u96c5\uff01","title":"3. \u4ee3\u7406\u6a21\u5f0f"},{"location":"retry/#4-jdk","text":"\u8fd9\u65f6\u5019\uff0c\u52a8\u6001\u4ee3\u7406\u5c31\u95ea\u4eae\u767b\u573a\u4e86\u3002\u53ea\u9700\u8981\u5199\u4e00\u4e2a\u4ee3\u7406\u5904\u7406\u7c7b\uff0c\u5c31\u53ef\u4ee5\u5f00\u5c40\u4e00\u6761\u72d7\uff0c\u780d\u5230\u4e5d\u5341\u4e5d\u3002 \u63a5\u53e3 1 2 3 4 5 6 7 public interface IService { public String hello () throws Exception ; } \u5b9e\u73b0\u7c7b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import java.time.LocalTime ; import java.util.concurrent.atomic.AtomicLong ; import org.springframework.stereotype.Service ; import lombok.extern.slf4j.Slf4j ; @Service @Slf4j public class HelloService implements IService { private static AtomicLong helloTimes = new AtomicLong (); @Override public String hello () throws Exception { long times = helloTimes . getAndIncrement (); if ( times % 4 != 0 ) { log . warn ( \"\u53d1\u751f\u5f02\u5e38, time: {}\" , LocalTime . now ()); throw new Exception ( \"\u53d1\u751fhello\u5f02\u5e38\" ); } return \"hello\" ; } } jdk\u52a8\u6001\u4ee3\u7406 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 import java.lang.reflect.InvocationHandler ; import java.lang.reflect.Method ; import java.lang.reflect.Proxy ; import java.time.LocalTime ; import lombok.extern.slf4j.Slf4j ; @Slf4j public class RetryInvocationHandler implements InvocationHandler { private final Object subject ; public RetryInvocationHandler ( Object subject ) { this . subject = subject ; } @Override public Object invoke ( Object proxy , Method method , Object [] args ) throws Throwable { int times = 0 ; while ( times <= 4 ) { try { return method . invoke ( subject , args ); } catch ( Exception e ) { times ++; log . info ( \"times:{},time:{}\" , times , LocalTime . now ()); if ( times > 4 ) { throw new Exception ( e ); } } Thread . sleep ( 1000 ); //\u5ef6\u65f61s } return null ; } /** * \u83b7\u53d6\u52a8\u6001\u4ee3\u7406 * @param realSubject * @return */ public static Object getProxy ( Object realSubject ) { InvocationHandler handler = new RetryInvocationHandler ( realSubject ); return Proxy . newProxyInstance ( handler . getClass (). getClassLoader (), realSubject . getClass (). getInterfaces (), handler ); } } \u6765\u4e00\u53d1\u5355\u5143\u6d4b\uff1a 1 2 3 4 5 6 7 8 9 @GetMapping ( \"dd\" ) public String getPrice ( Integer lastPrice ) throws Exception { HelloService helloService = new HelloService (); IService proxyService = ( IService ) RetryInvocationHandler . getProxy ( helloService ); String hello = proxyService . hello (); log . info ( \"hello:{}\" , hello ); return hello ; } 1 2 3 4 5 6 7 \u53d1\u751f\u5f02\u5e38, time: 14:51:39.167 times:1,time:14:51:39.167 \u53d1\u751f\u5f02\u5e38, time: 14:51:40.172 times:2,time:14:51:40.172 \u53d1\u751f\u5f02\u5e38, time: 14:51:41.176 times:3,time:14:51:41.177 hello:hello \u5728\u91cd\u8bd5\u4e864\u6b21\u4e4b\u540e\u8f93\u51fa\u4e86Hello\uff0c\u7b26\u5408\u9884\u671f\u3002 \u52a8\u6001\u4ee3\u7406\u53ef\u4ee5\u5c06\u91cd\u8bd5\u903b\u8f91\u90fd\u653e\u5230\u4e00\u5757\uff0c\u663e\u7136\u6bd4\u76f4\u63a5\u4f7f\u7528\u4ee3\u7406\u7c7b\u8981\u65b9\u4fbf\u5f88\u591a\uff0c\u4e5f\u66f4\u52a0\u4f18\u96c5\u3002 \u4e0d\u8fc7\u4e0d\u8981\u9ad8\u5174\u7684\u592a\u65e9\uff0c\u8fd9\u91cc\u56e0\u4e3a\u88ab\u4ee3\u7406\u7684HelloService\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u7c7b\uff0c\u6ca1\u6709\u4f9d\u8d56\u5176\u5b83\u7c7b\uff0c\u6240\u4ee5\u76f4\u63a5\u521b\u5efa\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u4f46\u5982\u679c\u88ab\u4ee3\u7406\u7684\u7c7b\u4f9d\u8d56\u4e86\u5176\u5b83\u88abSpring\u5bb9\u5668\u7ba1\u7406\u7684\u7c7b\uff0c\u5219\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u56e0\u4e3a\u6ca1\u6709\u628a\u88ab\u4f9d\u8d56\u7684\u5b9e\u4f8b\u6ce8\u5165\u5230\u521b\u5efa\u7684\u4ee3\u7406\u5b9e\u4f8b\u4e2d\u3002 \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c31\u6bd4\u8f83\u590d\u6742\u4e86\uff0c\u9700\u8981\u4eceSpring\u5bb9\u5668\u4e2d\u83b7\u53d6\u5df2\u7ecf\u88c5\u914d\u597d\u7684\uff0c\u9700\u8981\u88ab\u4ee3\u7406\u7684\u5b9e\u4f8b\uff0c\u7136\u540e\u4e3a\u5176\u521b\u5efa\u4ee3\u7406\u7c7b\u5b9e\u4f8b\uff0c\u5e76\u4ea4\u7ed9Spring\u5bb9\u5668\u6765\u7ba1\u7406\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u6bcf\u6b21\u90fd\u91cd\u65b0\u521b\u5efa\u65b0\u7684\u4ee3\u7406\u7c7b\u5b9e\u4f8b\u4e86\u3002 \u8bdd\u4e0d\u591a\u8bf4\uff0c\u64b8\u8d77\u8896\u5b50\u5c31\u662f\u5e72\u3002 \u5934\u6761\u539f\u6587","title":"4. JDK\u52a8\u6001\u4ee3\u7406"},{"location":"retry/#5-cglib","text":"","title":"5. cglib"},{"location":"retry/#6-spring-aop","text":"\u60f3\u8981\u65e0\u4fb5\u5165\u5f0f\u7684\u4fee\u6539\u539f\u6709\u903b\u8f91\uff1f\u60f3\u8981\u4e00\u4e2a\u6ce8\u89e3\u5c31\u5b9e\u73b0\u91cd\u8bd5\uff1f\u7528Spring AOP\u4e0d\u5c31\u80fd\u5b8c\u7f8e\u5b9e\u73b0\u5417\uff1f\u4f7f\u7528AOP\u6765\u4e3a\u76ee\u6807\u8c03\u7528\u8bbe\u7f6e\u5207\u9762\uff0c\u5373\u53ef\u5728\u76ee\u6807\u65b9\u6cd5\u8c03\u7528\u524d\u540e\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u903b\u8f91\u3002 \u5148\u521b\u5efa\u4e00\u4e2a\u6ce8\u89e3\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import java.lang.annotation.Documented ; import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Target ( ElementType . METHOD ) @Retention ( RetentionPolicy . RUNTIME ) @Documented public @interface Retryable { int retryTimes () default 3 ; int retryInterval () default 1 ; } \u6709\u4e24\u4e2a\u53c2\u6570\uff0cretryTimes \u4ee3\u8868\u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0cretryInterval\u4ee3\u8868\u91cd\u8bd5\u95f4\u9694\u3002 \u7136\u540e\u5728\u9700\u8981\u91cd\u8bd5\u7684\u65b9\u6cd5\u4e0a\u52a0\u4e0a\u6ce8\u89e3\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import java.time.LocalTime ; import java.util.concurrent.atomic.AtomicLong ; import org.springframework.stereotype.Service ; import com.example.demo.anno.Retryable ; import lombok.extern.slf4j.Slf4j ; @Service @Slf4j public class HelloService { private static AtomicLong helloTimes = new AtomicLong (); @Retryable ( retryTimes = 4 , retryInterval = 2 ) public String hello () throws Exception { long times = helloTimes . getAndIncrement (); if ( times % 4 != 0 ) { log . warn ( \"\u53d1\u751f\u5f02\u5e38, time: {}\" , LocalTime . now ()); throw new Exception ( \"\u53d1\u751fhello\u5f02\u5e38\" ); } return \"hello\" ; } } \u63a5\u7740\uff0c\u8fdb\u884c\u6700\u540e\u4e00\u6b65\uff0c\u7f16\u5199AOP\u5207\u9762 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 import org.aspectj.lang.ProceedingJoinPoint ; import org.aspectj.lang.annotation.Around ; import org.aspectj.lang.annotation.Aspect ; import org.aspectj.lang.annotation.Pointcut ; import org.aspectj.lang.reflect.MethodSignature ; import org.springframework.stereotype.Component ; import com.example.demo.anno.Retryable ; import lombok.extern.slf4j.Slf4j ; @Component @Slf4j @Aspect public class RetryAspect { @Pointcut ( \"@annotation(com.example.demo.anno.Retryable)\" ) private void retryMethodCall () {} @Around ( \"retryMethodCall()\" ) public Object retry ( ProceedingJoinPoint joinPoint ) throws Exception { Retryable retryable = (( MethodSignature ) joinPoint . getSignature ()). getMethod (). getAnnotation ( Retryable . class ); int retryInterval = retryable . retryInterval (); int maxRetryTimes = retryable . retryTimes (); Throwable error = new RuntimeException (); for ( int retryTimes = 1 ; retryTimes <= maxRetryTimes ; retryTimes ++ ) { try { Object result = joinPoint . proceed (); return result ; } catch ( Throwable e ) { error = e ; log . warn ( \"\u8c03\u7528\u53d1\u751f\u5f02\u5e38\uff0c\u5f00\u59cb\u91cd\u8bd5\u3002retryTimes:{}\" , retryTimes ); } Thread . sleep ( retryInterval * 1000 ); } throw new Exception ( \"\u91cd\u8bd5\u6b21\u6570\u8017\u5c3d\" , error ); } } \u5f00\u59cb\u6d4b\u8bd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 @Autowired private HelloService helloService ; @GetMapping ( \"dd\" ) public String getPrice ( Integer lastPrice ) throws Exception { return helloService . hello (); } 1 2 3 4 5 6 7 Completed initialization in 7 ms \u53d1\u751f\u5f02\u5e38, time: 16:36:15.416 \u8c03\u7528\u53d1\u751f\u5f02\u5e38\uff0c\u5f00\u59cb\u91cd\u8bd5\u3002retryTimes:1 \u53d1\u751f\u5f02\u5e38, time: 16:36:17.421 \u8c03\u7528\u53d1\u751f\u5f02\u5e38\uff0c\u5f00\u59cb\u91cd\u8bd5\u3002retryTimes:2 \u53d1\u751f\u5f02\u5e38, time: 16:36:19.427 \u8c03\u7528\u53d1\u751f\u5f02\u5e38\uff0c\u5f00\u59cb\u91cd\u8bd5\u3002retryTimes:3 \u8fd9\u6837\u5c31\u76f8\u5f53\u4f18\u96c5\u4e86\uff0c\u4e00\u4e2a\u6ce8\u89e3\u5c31\u80fd\u641e\u5b9a\u91cd\u8bd5\uff0c\u7b80\u76f4\u4e0d\u8981\u66f4\u68d2\u3002","title":"6. Spring AOP"},{"location":"retry/#7-spring","text":"\u5b9e\u9645\u4e0aSpring\u4e2d\u5c31\u6709\u6bd4\u8f83\u5b8c\u5584\u7684\u91cd\u8bd5\u673a\u5236\uff0c\u6bd4\u4e0a\u9762\u7684\u5207\u9762\u66f4\u52a0\u597d\u7528\uff0c\u8fd8\u4e0d\u9700\u8981\u81ea\u5df1\u52a8\u624b\u91cd\u65b0\u9020\u8f6e\u5b50\u3002 \u90a3\u8ba9\u6211\u4eec\u5148\u6765\u770b\u770b\u8fd9\u4e2a\u8f6e\u5b50\u7a76\u7adf\u597d\u4e0d\u597d\u4f7f\u3002 \u5148\u5f15\u5165\u91cd\u8bd5\u6240\u9700\u7684jar\u5305 1 2 3 4 5 6 7 8 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-aop </artifactId> </dependency> <dependency> <groupId> org.springframework.retry </groupId> <artifactId> spring-retry </artifactId> </dependency> \u7136\u540e\u5728\u542f\u52a8\u7c7b\u6216\u8005\u914d\u7f6e\u7c7b\u4e0a\u6dfb\u52a0@EnableRetry\u6ce8\u89e3\uff0c\u63a5\u4e0b\u6765\u5728\u9700\u8981\u91cd\u8bd5\u7684\u65b9\u6cd5\u4e0a\u6dfb\u52a0@Retryable\u6ce8\u89e3\uff08\u55ef\uff1f\u597d\u50cf\u8ddf\u6211\u81ea\u5b9a\u4e49\u7684\u6ce8\u89e3\u4e00\u6837\uff1f\u7adf\u7136\u6284\u88ad\u6211\u7684\u6ce8\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import java.time.LocalTime ; import java.util.concurrent.atomic.AtomicLong ; import org.springframework.retry.annotation.Backoff ; import org.springframework.retry.annotation.Retryable ; import org.springframework.stereotype.Service ; import lombok.extern.slf4j.Slf4j ; @Service @Slf4j public class HelloService { private static AtomicLong helloTimes = new AtomicLong (); @Retryable ( maxAttempts = 5 , backoff = @Backoff ( delay = 1000 , multiplier = 2 )) public String hello () throws Exception { long times = helloTimes . getAndIncrement (); if ( times % 4 != 0 ) { log . warn ( \"\u53d1\u751f\u5f02\u5e38, time: {}\" , LocalTime . now ()); throw new Exception ( \"\u53d1\u751fhello\u5f02\u5e38\" ); } return \"hello\" ; } } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f1a\u91cd\u8bd5\u4e09\u6b21\uff0c\u91cd\u8bd5\u95f4\u9694\u4e3a1\u79d2\u3002\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u91cd\u8bd5\u6b21\u6570\u548c\u95f4\u9694\u3002\u8fd9\u6837\u5c31\u8ddf\u6211\u524d\u9762\u5b9e\u73b0\u7684\u529f\u80fd\u662f\u4e00\u6bdb\u4e00\u6837\u7684\u4e86\u3002 \u4f46Spring\u91cc\u7684\u91cd\u8bd5\u673a\u5236\u8fd8\u652f\u6301\u5f88\u591a\u5f88\u6709\u7528\u7684\u7279\u6027\uff0c\u6bd4\u5982\u8bf4\uff0c\u53ef\u4ee5\u6307\u5b9a\u53ea\u5bf9\u7279\u5b9a\u7c7b\u578b\u7684\u5f02\u5e38\u8fdb\u884c\u91cd\u8bd5\uff0c\u8fd9\u6837\u5982\u679c\u629b\u51fa\u7684\u662f\u5176\u5b83\u7c7b\u578b\u7684\u5f02\u5e38\u5219\u4e0d\u4f1a\u8fdb\u884c\u91cd\u8bd5\uff0c\u5c31\u53ef\u4ee5\u5bf9\u91cd\u8bd5\u8fdb\u884c\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\u3002\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u4f1a\u5bf9\u6240\u6709\u5f02\u5e38\u90fd\u91cd\u8bd5\u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528include\u548cexclude\u6765\u6307\u5b9a\u5305\u542b\u6216\u8005\u6392\u9664\u54ea\u4e9b\u5f02\u5e38\u8fdb\u884c\u91cd\u8bd5\u3002 \u53ef\u4ee5\u7528maxAttemps\u6307\u5b9a\u6700\u5927\u91cd\u8bd5\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a3\u6b21\u3002 \u53ef\u4ee5\u7528interceptor\u8bbe\u7f6e\u91cd\u8bd5\u62e6\u622a\u5668\u7684bean\u540d\u79f0\u3002 \u53ef\u4ee5\u901a\u8fc7label\u8bbe\u7f6e\u8be5\u91cd\u8bd5\u7684\u552f\u4e00\u6807\u5fd7\uff0c\u7528\u4e8e\u7edf\u8ba1\u8f93\u51fa\u3002 \u53ef\u4ee5\u4f7f\u7528exceptionExpression\u6765\u6dfb\u52a0\u5f02\u5e38\u8868\u8fbe\u5f0f\uff0c\u5728\u629b\u51fa\u5f02\u5e38\u540e\u6267\u884c\uff0c\u4ee5\u5224\u65ad\u540e\u7eed\u662f\u5426\u8fdb\u884c\u91cd\u8bd5\u3002 \u6b64\u5916\uff0cSpring\u4e2d\u7684\u91cd\u8bd5\u673a\u5236\u8fd8\u652f\u6301\u4f7f\u7528backoff\u6765\u8bbe\u7f6e\u91cd\u8bd5\u8865\u507f\u673a\u5236\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u91cd\u8bd5\u95f4\u9694\uff0c\u5e76\u4e14\u652f\u6301\u8bbe\u7f6e\u91cd\u8bd5\u5ef6\u8fdf\u500d\u6570\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a \u8be5\u65b9\u6cd5\u8c03\u7528\u5c06\u4f1a\u5728\u629b\u51faHelloRetryException\u5f02\u5e38\u540e\u8fdb\u884c\u91cd\u8bd5\uff0c\u6700\u5927\u91cd\u8bd5\u6b21\u6570\u4e3a5\uff0c\u7b2c\u4e00\u6b21\u91cd\u8bd5\u95f4\u9694\u4e3a1s\uff0c\u4e4b\u540e\u4ee52\u500d\u5927\u5c0f\u8fdb\u884c\u9012\u589e\uff0c\u7b2c\u4e8c\u6b21\u91cd\u8bd5\u95f4\u9694\u4e3a2s\uff0c\u7b2c\u4e09\u6b21\u4e3a4s\uff0c\u7b2c\u56db\u6b21\u4e3a8s\u3002 \u91cd\u8bd5\u673a\u5236\u8fd8\u652f\u6301\u4f7f\u7528@Recover \u6ce8\u89e3\u6765\u8fdb\u884c\u5584\u540e\u5de5\u4f5c\uff0c\u5f53\u91cd\u8bd5\u8fbe\u5230\u6307\u5b9a\u6b21\u6570\u4e4b\u540e\uff0c\u5c06\u4f1a\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728\u8be5\u65b9\u6cd5\u4e2d\u8fdb\u884c\u65e5\u5fd7\u8bb0\u5f55\u7b49\u64cd\u4f5c\u3002 \u8fd9\u91cc\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u60f3\u8981@Recover \u6ce8\u89e3\u751f\u6548\u7684\u8bdd\uff0c\u9700\u8981\u8ddf\u88ab@Retryable \u6807\u8bb0\u7684\u65b9\u6cd5\u5728\u540c\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u4e14\u88ab@Retryable \u6807\u8bb0\u7684\u65b9\u6cd5\u4e0d\u80fd\u6709\u8fd4\u56de\u503c\uff0c\u5426\u5219\u4e0d\u4f1a\u751f\u6548\u3002 \u5e76\u4e14\u5982\u679c\u4f7f\u7528\u4e86@Recover\u6ce8\u89e3\u7684\u8bdd\uff0c\u91cd\u8bd5\u6b21\u6570\u8fbe\u5230\u6700\u5927\u6b21\u6570\u540e\uff0c\u5982\u679c\u5728@Recover\u6807\u8bb0\u7684\u65b9\u6cd5\u4e2d\u65e0\u5f02\u5e38\u629b\u51fa\uff0c\u662f\u4e0d\u4f1a\u629b\u51fa\u539f\u5f02\u5e38\u7684 \u9664\u4e86\u4f7f\u7528\u6ce8\u89e3\u5916\uff0cSpring Retry \u4e5f\u652f\u6301\u76f4\u63a5\u5728\u8c03\u7528\u65f6\u4f7f\u7528\u4ee3\u7801\u8fdb\u884c\u91cd\u8bd5\uff1a \u6b64\u65f6\u552f\u4e00\u7684\u597d\u5904\u662f\u53ef\u4ee5\u8bbe\u7f6e\u591a\u79cd\u91cd\u8bd5\u7b56\u7565\uff1a \u53ef\u4ee5\u770b\u51fa\uff0cSpring\u4e2d\u7684\u91cd\u8bd5\u673a\u5236\u8fd8\u662f\u76f8\u5f53\u5b8c\u5584\u7684\uff0c\u6bd4\u4e0a\u9762\u81ea\u5df1\u5199\u7684AOP\u5207\u9762\u529f\u80fd\u66f4\u52a0\u5f3a\u5927\u3002 \u8fd9\u91cc\u8fd8\u9700\u8981\u518d\u63d0\u9192\u7684\u4e00\u70b9\u662f\uff0c\u7531\u4e8eSpring Retry\u7528\u5230\u4e86Aspect\u589e\u5f3a\uff0c\u6240\u4ee5\u5c31\u4f1a\u6709\u4f7f\u7528Aspect\u4e0d\u53ef\u907f\u514d\u7684\u5751\u2014\u2014\u65b9\u6cd5\u5185\u90e8\u8c03\u7528\uff0c\u5982\u679c\u88ab @Retryable \u6ce8\u89e3\u7684\u65b9\u6cd5\u7684\u8c03\u7528\u65b9\u548c\u88ab\u8c03\u7528\u65b9\u5904\u4e8e\u540c\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u90a3\u4e48\u91cd\u8bd5\u5c06\u4f1a\u5931\u6548\u3002 \u4f46\u4e5f\u8fd8\u662f\u5b58\u5728\u4e00\u5b9a\u7684\u4e0d\u8db3\uff0cSpring\u7684\u91cd\u8bd5\u673a\u5236\u53ea\u652f\u6301\u5bf9\u5f02\u5e38\u8fdb\u884c\u6355\u83b7\uff0c\u800c\u65e0\u6cd5\u5bf9\u8fd4\u56de\u503c\u8fdb\u884c\u6821\u9a8c\u3002 \u53ef\u4ee5\u770b\u51fa\uff0cSpring\u4e2d\u7684\u91cd\u8bd5\u673a\u5236\u8fd8\u662f\u76f8\u5f53\u5b8c\u5584\u7684\uff0c\u6bd4\u4e0a\u9762\u81ea\u5df1\u5199\u7684AOP\u5207\u9762\u529f\u80fd\u66f4\u52a0\u5f3a\u5927\u3002 \u8fd9\u91cc\u8fd8\u9700\u8981\u518d\u63d0\u9192\u7684\u4e00\u70b9\u662f\uff0c\u7531\u4e8eSpring Retry\u7528\u5230\u4e86Aspect\u589e\u5f3a\uff0c\u6240\u4ee5\u5c31\u4f1a\u6709\u4f7f\u7528Aspect\u4e0d\u53ef\u907f\u514d\u7684\u5751\u2014\u2014\u65b9\u6cd5\u5185\u90e8\u8c03\u7528\uff0c\u5982\u679c\u88ab @Retryable \u6ce8\u89e3\u7684\u65b9\u6cd5\u7684\u8c03\u7528\u65b9\u548c\u88ab\u8c03\u7528\u65b9\u5904\u4e8e\u540c\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u90a3\u4e48\u91cd\u8bd5\u5c06\u4f1a\u5931\u6548\u3002 \u4f46\u4e5f\u8fd8\u662f\u5b58\u5728\u4e00\u5b9a\u7684\u4e0d\u8db3\uff0cSpring\u7684\u91cd\u8bd5\u673a\u5236\u53ea\u652f\u6301\u5bf9\u5f02\u5e38\u8fdb\u884c\u6355\u83b7\uff0c\u800c\u65e0\u6cd5\u5bf9\u8fd4\u56de\u503c\u8fdb\u884c\u6821\u9a8c\u3002","title":"7. Spring \u7684\u91cd\u8bd5\u6ce8\u89e3"},{"location":"retry/#8-guava-retry","text":"\u6700\u540e\uff0c\u518d\u4ecb\u7ecd\u53e6\u4e00\u4e2a\u91cd\u8bd5\u5229\u5668\u2014\u2014Guava Retry\u3002 \u76f8\u6bd4Spring Retry\uff0cGuava Retry\u5177\u6709\u66f4\u5f3a\u7684\u7075\u6d3b\u6027\uff0c\u53ef\u4ee5\u6839\u636e\u8fd4\u56de\u503c\u6821\u9a8c\u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u8fdb\u884c\u91cd\u8bd5\u3002 \u5148\u6765\u770b\u4e00\u4e2a\u5c0f\u6817\u5b50\uff1a \u5148\u5f15\u5165jar\u5305\uff1a 1 2 3 4 5 <dependency> <groupId> com.github.rholder </groupId> <artifactId> guava-retrying </artifactId> <version> 2.0.0 </version> </dependency> \u7136\u540e\u7528\u4e00\u4e2a\u5c0fDemo\u6765\u611f\u53d7\u4e00\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 Retryer < String > retryer = RetryerBuilder .< String > newBuilder () . retryIfExceptionOfType ( Exception . class ) . retryIfResult ( StringUtils :: isEmpty ) . withWaitStrategy ( WaitStrategies . fixedWait ( 3 , TimeUnit . SECONDS )) . withStopStrategy ( StopStrategies . stopAfterAttempt ( 3 )) . build (); return retryer . call (()-> helloService . hello ()); \u5148\u521b\u5efa\u4e00\u4e2aRetryer\u5b9e\u4f8b\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e2a\u5b9e\u4f8b\u5bf9\u9700\u8981\u91cd\u8bd5\u7684\u65b9\u6cd5\u8fdb\u884c\u8c03\u7528\uff0c\u53ef\u4ee5\u901a\u8fc7\u5f88\u591a\u65b9\u6cd5\u6765\u8bbe\u7f6e\u91cd\u8bd5\u673a\u5236\uff0c\u6bd4\u5982\u4f7f\u7528retryIfException\u6765\u5bf9\u6240\u6709\u5f02\u5e38\u8fdb\u884c\u91cd\u8bd5\uff0c\u4f7f\u7528retryIfExceptionOfType\u65b9\u6cd5\u6765\u8bbe\u7f6e\u5bf9\u6307\u5b9a\u5f02\u5e38\u8fdb\u884c\u91cd\u8bd5\uff0c\u4f7f\u7528retryIfResult\u6765\u5bf9\u4e0d\u7b26\u5408\u9884\u671f\u7684\u8fd4\u56de\u7ed3\u679c\u8fdb\u884c\u91cd\u8bd5\uff0c\u4f7f\u7528retryIfRuntimeException\u65b9\u6cd5\u6765\u5bf9\u6240\u6709RuntimeException\u8fdb\u884c\u91cd\u8bd5\u3002 \u8fd8\u6709\u4e94\u4e2a\u4ee5with\u5f00\u5934\u7684\u65b9\u6cd5\uff0c\u7528\u6765\u5bf9\u91cd\u8bd5\u7b56\u7565/\u7b49\u5f85\u7b56\u7565/\u963b\u585e\u7b56\u7565/\u5355\u6b21\u4efb\u52a1\u6267\u884c\u65f6\u95f4\u9650\u5236/\u81ea\u5b9a\u4e49\u76d1\u542c\u5668\u8fdb\u884c\u8bbe\u7f6e\uff0c\u4ee5\u5b9e\u73b0\u66f4\u52a0\u5f3a\u5927\u7684\u5f02\u5e38\u5904\u7406\u3002 \u901a\u8fc7\u8ddfSpring AOP\u7684\u7ed3\u5408\uff0c\u53ef\u4ee5\u5b9e\u73b0\u6bd4Spring Retry\u66f4\u52a0\u5f3a\u5927\u7684\u91cd\u8bd5\u529f\u80fd\u3002 \u4ed4\u7ec6\u5bf9\u6bd4\u4e4b\u4e0b\uff0cGuava Retry\u53ef\u4ee5\u63d0\u4f9b\u7684\u7279\u6027\u6709\uff1a \u53ef\u4ee5\u8bbe\u7f6e\u4efb\u52a1\u5355\u6b21\u6267\u884c\u7684\u65f6\u95f4\u9650\u5236\uff0c\u5982\u679c\u8d85\u65f6\u5219\u629b\u51fa\u5f02\u5e38\u3002 \u53ef\u4ee5\u8bbe\u7f6e\u91cd\u8bd5\u76d1\u542c\u5668\uff0c\u7528\u6765\u6267\u884c\u989d\u5916\u7684\u5904\u7406\u5de5\u4f5c\u3002 \u53ef\u4ee5\u8bbe\u7f6e\u4efb\u52a1\u963b\u585e\u7b56\u7565\uff0c\u5373\u53ef\u4ee5\u8bbe\u7f6e\u5f53\u524d\u91cd\u8bd5\u5b8c\u6210\uff0c\u4e0b\u6b21\u91cd\u8bd5\u5f00\u59cb\u524d\u7684\u8fd9\u6bb5\u65f6\u95f4\u505a\u4ec0\u4e48\u4e8b\u60c5\u3002 \u53ef\u4ee5\u901a\u8fc7\u505c\u6b62\u91cd\u8bd5\u7b56\u7565\u548c\u7b49\u5f85\u7b56\u7565\u7ed3\u5408\u4f7f\u7528\u6765\u8bbe\u7f6e\u66f4\u52a0\u7075\u6d3b\u7684\u7b56\u7565\uff0c\u6bd4\u5982\u6307\u6570\u7b49\u5f85\u65f6\u957f\u5e76\u6700\u591a10\u6b21\u8c03\u7528\uff0c\u968f\u673a\u7b49\u5f85\u65f6\u957f\u5e76\u6c38\u4e0d\u505c\u6b62\u7b49\u7b49\u3002","title":"8. Guava Retry"},{"location":"retry/#9","text":"\u672c\u6587\u7531\u6d45\u5165\u6df1\u7684\u5bf9\u591a\u79cd\u91cd\u8bd5\u7684\u59ff\u52bf\u8fdb\u884c\u4e86360\u5ea6\u65e0\u6b7b\u89d2\u6559\u5b66\uff0c\u4ece\u6700\u7b80\u5355\u7684\u624b\u52a8\u91cd\u8bd5\uff0c\u5230\u4f7f\u7528\u9759\u6001\u4ee3\u7406\uff0c\u518d\u5230JDK\u52a8\u6001\u4ee3\u7406\u548cCGLib\u52a8\u6001\u4ee3\u7406\uff0c\u518d\u5230Spring AOP\uff0c\u90fd\u662f\u624b\u5de5\u9020\u8f6e\u5b50\u7684\u8fc7\u7a0b\uff0c\u6700\u540e\u4ecb\u7ecd\u4e86\u4e24\u79cd\u76ee\u524d\u6bd4\u8f83\u597d\u7528\u7684\u8f6e\u5b50\uff0c\u4e00\u4e2a\u662fSpring Retry\uff0c\u4f7f\u7528\u8d77\u6765\u7b80\u5355\u7c97\u66b4\uff0c\u4e0eSpring\u6846\u67b6\u5929\u751f\u642d\u914d\uff0c\u4e00\u4e2a\u6ce8\u89e3\u641e\u5b9a\u6240\u6709\u4e8b\u60c5\uff0c\u53e6\u4e00\u4e2a\u4fbf\u662fGuava Retry\uff0c\u4e0d\u4f9d\u8d56\u4e8eSpring\u6846\u67b6\uff0c\u81ea\u6210\u4f53\u7cfb\uff0c\u4f7f\u7528\u8d77\u6765\u66f4\u52a0\u7075\u6d3b\u5f3a\u5927\u3002 \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u5927\u90e8\u5206\u573a\u666f\u4e0b\uff0cSpring Retry\u63d0\u4f9b\u7684\u91cd\u8bd5\u673a\u5236\u5df2\u7ecf\u8db3\u591f\u5f3a\u5927\uff0c\u5982\u679c\u4e0d\u9700\u8981Guava Retry\u63d0\u4f9b\u7684\u989d\u5916\u7075\u6d3b\u6027\uff0c\u4f7f\u7528Spring Retry\u5c31\u5f88\u68d2\u4e86\u3002\u5f53\u7136\uff0c\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\uff0c\u4f46\u6ca1\u6709\u5fc5\u8981\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u9f13\u52b1\u91cd\u590d\u9020\u8f6e\u5b50\uff0c\u5148\u628a\u522b\u4eba\u7684\u8f6e\u5b50\u7814\u7a76\u6e05\u695a\u518d\u60f3\u60f3\u8fd8\u7528\u4e0d\u7528\u81ea\u5df1\u52a8\u624b\u3002 \u672c\u6587\u5230\u6b64\u5c31\u544a\u4e00\u6bb5\u843d\u4e86\uff0c\u53c8\u7528\u4e86\u4e00\u5929\u7684\u65f6\u95f4\u5b8c\u6210\u4e86\u5b8c\u6210\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u5199\u4f5c\u7684\u76ee\u7684\u5728\u4e8e\u603b\u7ed3\u548c\u5206\u4eab\uff0c\u6211\u76f8\u4fe1\u6700\u4f73\u5b9e\u8df5\u662f\u53ef\u4ee5\u603b\u7ed3\u548c\u79ef\u7d2f\u4e0b\u6765\u7684\uff0c\u5728\u5927\u591a\u6570\u573a\u666f\u4e0b\u90fd\u662f\u9002\u7528\u7684\uff0c\u8fd9\u4e9b\u6700\u4f73\u5b9e\u8df5\u4f1a\u5728\u9010\u6e10\u7684\u79ef\u7d2f\u8fc7\u7a0b\u4e2d\uff0c\u6210\u4e3a\u6bd4\u7ecf\u9a8c\u66f4\u4e3a\u91cd\u8981\u7684\u4e1c\u897f\u3002\u56e0\u4e3a\u7ecf\u9a8c\u4e0d\u603b\u7ed3\u5c31\u4f1a\u5fd8\u8bb0\uff0c\u800c\u603b\u7ed3\u51fa\u6765\u7684\u5185\u5bb9\u5374\u4e0d\u4f1a\u88ab\u4e22\u5931\u3002","title":"9. \u603b\u7ed3"},{"location":"self-define-starter/","text":"1. \u524d\u8a00 \u00b6 \u968f\u7740Spring\u7684\u65e5\u6e10\u81c3\u80bf\uff0c\u4e3a\u4e86\u7b80\u5316\u914d\u7f6e\u3001\u5f00\u7bb1\u5373\u7528\u3001\u5feb\u901f\u96c6\u6210\uff0cSpring Boot \u6a2a\u7a7a\u51fa\u4e16\u3002\u76ee\u524d\u5df2\u7ecf\u6210\u4e3a Java \u76ee\u524d\u6700\u706b\u70ed\u7684\u6846\u67b6\u4e86\u3002\u5e73\u5e38\u6211\u4eec\u7528Spring Boot\u5f00\u53d1web\u5e94\u7528\u3002Spring mvc \u9ed8\u8ba4\u4f7f\u7528tomcat servlet\u5bb9\u5668\uff0c \u56e0\u4e3aSpring mvc\u7ec4\u4ef6\u96c6\u6210\u4e86spring-boot-starter-tomcat \u3002\u4f46\u662f\u73b0\u5728undertow servlet\u5bb9\u5668\u7684\u6027\u80fd\u975e\u5e38\u597d\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5148\u6392\u9664tomcat\uff1a 1 2 3 4 5 6 7 8 9 10 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <exclusions> <exclusion> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-tomcat </artifactId> </exclusion> </exclusions> </dependency> \u7136\u540e\u76f4\u63a5\u66ff\u6362\u4e3aundertow: 1 2 3 4 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-undertow </artifactId> </dependency> \u4ee3\u7801\u65e0\u9700\u66f4\u6539\u3002\u8fd9\u5c31\u662f\u7ec4\u4ef6\u5316\u540e\u7684\u597d\u5904\uff1a1.\u53ef\u63d2\u62d4\u30022.\u53ef\u5b9a\u5236\u30023.\u6309\u9700\u96c6\u6210\u3002\u4e3a\u4ec0\u4e48\u80fd\u591f\u505a\u5230\u5feb\u901f\u9002\u914d\uff1f\u6211\u4eec\u8bd5\u60f3\u4e00\u4e2a\u8fd9\u6837\u4e00\u4e2a\u573a\u666f\uff1a\u5047\u5982\u4f60\u7684\u6c7d\u8f66\u8f6e\u5b50\u4e0a\u6709\u4e2a\u87ba\u4e1d\u574f\u4e86\uff0c\u4f60\u8981\u4e70\u4e00\u4e2a\u87ba\u4e1d\u53bb\u81ea\u5df1\u88c5\u3002\u4f60\u53bb\u5e97\u91cc\u53ea\u8981\u62a5\u4e0a\u4f60\u6c7d\u8f66\u7684\u54c1\u724c\u548c\u4f4d\u7f6e\u8001\u677f\u5c31\u80fd\u51c6\u786e\u5730\u77e5\u9053\u4f60\u8981\u7528\u54ea\u79cd\u87ba\u4e1d\u3002\u8fd9\u5c31\u662f\u6807\u51c6\u5df2\u7ecf\u5236\u5b9a\u597d\u7684\u597d\u5904\u3002\u5982\u679c\u6ca1\u6709\u6807\u51c6\uff0c\u4f60\u5f88\u5bb9\u6613\u4e70\u5230\u4e0d\u914d\u5957\u7684\u87ba\u4e1d\uff0c\u4f60\u8981\u4e0d\u505c\u7684\u8bd5\u9519\u3002\u8fd9\u663e\u7136\u4e0d\u662f\u4f60\u60f3\u8981\u7684\u3002\u5982\u679c\u628a\u8fd9\u79cd\u6807\u51c6\u6f5c\u79fb\u9ed8\u5316\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u6c9f\u901a\u4e0a\u5c31\u66f4\u52a0\u5feb\u6377\u65b9\u4fbf\u3002\u6709\u65f6\u5019\u4f60\u5973\u670b\u53cb\u4e00\u4e2a\u773c\u795e\u4f60\u5c31\u77e5\u9053\u5979\u60f3\u8981\u5e72\u4ec0\u4e48\u3002\u6240\u4ee5Spring Boot \u6709\u4e00\u4e2a\u201c\u7ea6\u5b9a\u5927\u4e8e\u914d\u7f6e\u201d\u7684\u89c4\u5219\uff0c\u8ba9\u7a0b\u5e8f\u7ec4\u4ef6\u4e4b\u95f4\u6765\u51cf\u5c11\u914d\u7f6e\uff0c\u964d\u4f4e\u590d\u6742\u6027\u3002\u56e0\u6b64\u4f60\u5728\u5f00\u53d1\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684Spring Boot Starter\u7684\u65f6\u5019\u4e5f\u6700\u597d\u8003\u8651\u4f60\u7684starter\u5982\u4f55\u8fbe\u5230\u4ee5\u4e0a\u7684\u4fbf\u5229\u6027\u3002 \u4e00\u4e2a\u7ec4\u4ef6\u7684\u8bbe\u8ba1\u4e00\u5b9a\u8981\u6709\u6807\u51c6\u548c\u89c4\u5219\u3002Spring Boot Starter\u4e5f\u4e0d\u4f8b\u5916\u3002\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e9b\u5e38\u89c4\u7684\u505a\u6cd5\u3002 2. spring boot \u7684\u4e00\u4e9b\u7ea6\u5b9a \u00b6 \u4e00\u4e2a\u7ec4\u4ef6\u7684\u8bbe\u8ba1\u4e00\u5b9a\u8981\u6709\u6807\u51c6\u548c\u89c4\u5219\u3002Spring Boot Starter\u4e5f\u4e0d\u4f8b\u5916\u3002\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e9b\u5e38\u89c4\u7684\u505a\u6cd5\u3002 2.1 \u547d\u540d\u98ce\u683c \u00b6 \u5982\u679c\u4f60\u5feb\u6709\u5b69\u5b50\u4e86\uff0c\u51fa\u751f\u524d\u4f60\u6bd4\u8f83\u6025\u7684\u4e00\u5b9a\u662f\u8d77\u4e2a\u540d\u5b57\u3002\u59d3\u540d\u6807\u8bc6\u7740\u4f60\u548c\u4f60\u7231\u4eba\u7684\u8840\u7edf\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u8d77\u9694\u58c1\u8001\u738b\u7684\u59d3\u6c0f\uff0c\u80af\u5b9a\u4f1a\u62db\u6765\u5f02\u6837\u7684\u773c\u5149\u3002\u5728maven\u4e2d\uff0cgroupId\u4ee3\u8868\u7740\u59d3\u6c0f\uff0cartifactId\u4ee3\u8868\u7740\u540d\u5b57\u3002Spring Boot\u4e5f\u662f\u6709\u4e00\u4e2a\u547d\u540d\u7684\u5efa\u8bae\u7684\u3002groupId\u4e0d\u8981\u7528\u5b98\u65b9\u7684org.springframework.boot \u800c\u8981\u7528\u4f60\u81ea\u5df1\u72ec\u7279\u7684\u3002\u5bf9\u4e8eartifactId\u7684\u547d\u540d\uff0cSpring Boot\u5b98\u65b9\u5efa\u8bae\u975e\u5b98\u65b9\u7684Starter\u547d\u540d\u683c\u5f0f\u9075\u5faa xxxx-spring-boot-starter \uff0c\u4f8b\u5982 mybatis-spring-boot-starter \u3002\u5b98\u65b9starter\u4f1a\u9075\u5faaspring-boot-starter-xxxx ,\u4f8b\u5982\u4e0a\u9762\u63d0\u5230\u7684spring-boot-starter-undertow \u3002\u5f88\u591a\u5f00\u6e90starter\u4f5c\u8005\u4f1a\u5ffd\u7565\u8fd9\u79cd\u7ea6\u5b9a\uff0c\u663e\u5f97\u4e0d\u591f\u201c\u4e13\u4e1a\u201c\u3002 3. \u81ea\u5b9a\u4e49\u4e00\u4e2aStarter \u00b6 \u63a5\u4e0b\u6765\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u7b2c\u4e09\u65b9\u77ed\u4fe1starter\uff0c\u547d\u540d\u4e3asms-spring-boot-starter \u3002\u6709\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\u9700\u8981\u8fb9\u5199\u8fb9\u6765\u4ecb\u7ecd\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7701\u7565\u4e86samples\u548ctest\u6a21\u5757\u6a21\u7248\uff1a 3.1 sms-spring-boot \u00b6 sms-spring-boot\u6784\u5efa\u4e00\u4e2a\u9879\u76ee\u91cd\u8981\u7684\u5c31\u662f\u4f9d\u8d56\u7ba1\u7406\u3002\u6240\u4ee5\u5f15\u5165BOM\u662f\u5fc5\u8981\u7684\u3002\u4e3b\u8981\u7ba1\u7406\u8be5starter\u7684\u6240\u6709\u6a21\u5757module\uff0c\u4ee5\u53castarter\u7684\u6240\u6709\u4f9d\u8d56\u751a\u81f3sms-spring-boot-autoconfigure\u90fd\u7531sms-spring-boot\u7ba1\u7406\u3002 3.2 autoconfigure \u00b6 \u8be5\u6a21\u5757\u4e3b\u8981\u7528\u6765\u5b9a\u4e49\u914d\u7f6e\u53c2\u6570\u3001\u4ee5\u53ca\u81ea\u52a8\u914d\u7f6e\u5bf9\u5916\u66b4\u9732\u7684\u529f\u80fd\uff08\u4e00\u822c\u662f\u62bd\u8c61\u7684\u63a5\u53e3Spring Bean\uff09\u3002 3.2.1 Properties\u914d\u7f6e \u00b6 \u4e00\u822c\u914d\u7f6e\u53c2\u6570\u90fd\u662f\u5728Spring Boot \u7684application.yml\u4e2d\u3002\u6211\u4eec\u4f1a\u5b9a\u4e49\u4e00\u4e2a\u524d\u7f00\u6807\u8bc6\u6765\u4f5c\u4e3a\u540d\u79f0\u7a7a\u95f4\u9694\u79bb\u5404\u4e2a\u7ec4\u4ef6\u7684\u53c2\u6570\u3002\u5bf9\u5e94\u7684\u7ec4\u4ef6\u4f1a\u5b9a\u4e49\u4e00\u4e2aXXXXProperties \u6765\u81ea\u52a8\u88c5\u914d\u8fd9\u4e9b\u53c2\u6570\u3002\u81ea\u52a8\u88c5\u914d\u7684\u673a\u5236\u57fa\u4e8e@ConfigurationProperties\u6ce8\u89e3\uff0c\u8bf7\u6ce8\u610f\u4e00\u5b9a\u8981\u663e\u5f0f\u58f0\u660e\u4f60\u914d\u7f6e\u7684\u524d\u7f00\u6807\u8bc6\uff08prefix\uff09\u3002\u6211\u4eec\u7684sms-spring-boot\u4f1a\u4f5c\u5982\u4e0b\u914d\u7f6e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 import lombok.Data ; import org.springframework.boot.context.properties.ConfigurationProperties ; /** * \u77ed\u4fe1\u914d\u7f6e\u7c7b * * @author Dax * @since 10 :10 2019-04-03 */ @ConfigurationProperties ( prefix = SmsProperties . SMS_PREFIX ) @Data public class SmsProperties { /** * sms prefix. */ static final String SMS_PREFIX = \"sms\" ; private Aliyun aliyun ; /** * sms switch production is set to true, development set to false */ private boolean enabled ; /** * aliyun sms config. */ @Data public static class Aliyun { /** * aliyun sms sign name must not be null */ private String signName ; /** * aliyun sms access key */ private String accessKeyId ; /** * aliyun sms access key secret */ private String accessKeySecret ; } } \u4ee5\u4e0a\u4ee5\u963f\u91cc\u4e91\u7684\u77ed\u4fe1\u529f\u80fd\u4e3a\u4f8b\u4f5c\u914d\u7f6e\uff0c\u5728\u5c06\u6765\u4f7f\u7528\u65f6\u53ea\u9700\u8981\u5728application.yml\u4e2d\u52a0\u5165\u4e0a\u9762\u5bf9\u5e94SmsProperties\u7684\u914d\u7f6e\uff1a 1 2 3 4 5 6 sms : enabled : true aliyun : access-key-id : access-key-secret : sign-name : \u5982\u679c\u4f60\u96c6\u6210\u4e86Spring Boot \u6821\u9a8c\u5e93 \u4f60\u4e5f\u53ef\u4ee5\u5bf9SmsProperties\u8fdb\u884c\u6821\u9a8c\u3002\u5728\u914d\u7f6eapplication.yml\u65f6\u7ec6\u5fc3\u7684java\u5f00\u53d1\u8005\u4f1a\u53d1\u73b0\u53c2\u6570\u914d\u7f6e\u90fd\u6709\u50cf\u4e0b\u9762\u4e00\u6837\u7684\u53c2\u6570\u63cf\u8ff0: \u5c31\u50cfjava\u4e2d\u7684\u6ce8\u91ca\u4e00\u6837\u65b9\u4fbf\u6211\u4eec\u7406\u89e3\u8be5\u914d\u7f6e\u7684\u4f5c\u7528\uff0c\u5176\u5b9e\u8fd9\u4e2a\u5c31\u662fjava\u6ce8\u91ca\u751f\u6210\u7684\u3002\u4f60\u9700\u8981\u4f9d\u8d56 1 2 3 4 5 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-autoconfigure </artifactId> <optional> true </optional> </dependency> \u7136\u540e\u5c31\u8be5\u4f9d\u8d56\u4f1a\u5bf9SmsProperties \u6210\u5458\u5c5e\u6027\u7684\u6ce8\u91ca\u8fdb\u884c\u63d0\u53d6\u751f\u6210\u4e00\u4e2aspring-configuration-metadata.json\u6587\u4ef6\uff0c\u8fd9\u5c31\u662f\u914d\u7f6e\u63cf\u8ff0\u7684\u5143\u6570\u636e\u6587\u4ef6\u3002Spring Boot\u5b98\u65b9\u4e5f\u5bf9\u6ce8\u91ca\u8fdb\u884c\u4e86\u4e00\u4e9b\u89c4\u5219\u7ea6\u675f\uff1a \u4e0d\u8981\u4ee5\u201cThe\u201d\u6216\u201cA\u201d\u5f00\u5934\u63cf\u8ff0\u3002 \u5bf9\u4e8eboolean\u7c7b\u578b\uff0c\u8bf7\u4f7f\u7528\u201cWhether\u201d \u6216\u201cEnable\u201d\u5f00\u59cb\u63cf\u8ff0\u3002 \u5bf9\u4e8e\u57fa\u4e8e\u96c6\u5408\u7684\u7c7b\u578b\uff0c\u8bf7\u4f7f\u7528\u201cComma-separated list\u201d \u5982\u679c\u9ed8\u8ba4\u65f6\u95f4\u5355\u4f4d\u4e0d\u7b49\u540c\u4e8e\u6beb\u79d2\uff0c\u5219\u4f7f\u7528java.time.Duration\u800c\u4e0d\u662flong\u63cf\u8ff0\u9ed8\u8ba4\u5355\u4f4d\uff0c\u4f8b\u5982\u201c\u5982\u679c\u672a\u6307\u5b9a\u6301\u7eed\u65f6\u95f4\u540e\u7f00\uff0c\u5219\u5c06\u4f7f\u7528\u79d2\u201d\u3002 \u9664\u975e\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\uff0c\u5426\u5219\u4e0d\u8981\u5728\u63cf\u8ff0\u4e2d\u63d0\u4f9b\u9ed8\u8ba4\u503c\u3002 \u8865\u5145\u6211\u4e2a\u4eba\u5efa\u8bae\u63cf\u8ff0\u5c3d\u91cf\u4f7f\u7528\u82f1\u6587\u63cf\u8ff0\u3002 3.2.2 \u914d\u7f6e\u81ea\u52a8\u66b4\u9732\u529f\u80fd\u63a5\u53e3 \u00b6 \u62ff\u5230\u914d\u7f6e\u540e\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6839\u636e\u914d\u7f6e\u6765\u521d\u59cb\u5316\u6211\u4eec\u7684\u529f\u80fd\u63a5\u53e3\uff0c\u6211\u4eec\u4f1a\u62bd\u8c61\u4e00\u4e2a\u77ed\u4fe1\u53d1\u9001\u63a5\u53e3SmsSender\uff0c\u6839\u636e\u77ed\u4fe1\u63d0\u4f9b\u65b9\u7684SDK\u6765\u8fdb\u884c\u529f\u80fd\u8bbe\u8ba1\u3002\u8bf7\u6ce8\u610fautoconfigure\u6a21\u5757\u7684\u4f9d\u8d56\u51e0\u4e4e\u90fd\u662f\u4e0d\u53ef\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u4f9d\u8d56\u5750\u6807\u914d\u7f6eoptional\u4e3atrue \u3002\u529f\u80fd\u63a5\u53e3\u5b9e\u73b0\u5b8c\u540e\u6211\u4eec\u4f1a\u7f16\u5199\u4e00\u4e2a\u81ea\u52a8\u914d\u7f6e\u7c7b SmsAutoConfiguration \u3002\u9664\u4e86@Configuration\u6ce8\u89e3\u5916\uff0c@ConfigurationProperties\u4f1a\u5e2e\u52a9\u6211\u4eec\u5c06\u6211\u4eec\u7684\u914d\u7f6e\u7c7b SmsProperties\u52a0\u8f7d\u8fdb\u6765\u3002\u7136\u540e\u5c06\u6211\u4eec\u9700\u8981\u66b4\u9732\u7684\u529f\u80fd\u63a5\u53e3\u58f0\u660e\u4e3aSpring Bean \u66b4\u9732\u7ed9Spring Boot\u5e94\u7528 \u3002 \u6709\u65f6\u5019\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u6761\u4ef6\u6765\u63a7\u5236SmsAutoConfiguration\u6216\u8005SmsSender \uff0c\u6bd4\u5982\u6839\u636e\u67d0\u4e2a\u6761\u4ef6\u662f\u5426\u52a0\u8f7d\u6216\u52a0\u8f7d\u4e0d\u540c\u7684 SmsSender\u3002\u6709\u65f6\u95f4\u4f60\u53ef\u4ee5\u770b\u770bredis-starter\u5c31\u80fd\u5f88\u660e\u663e\u611f\u89c9\u5230\uff0c\u5b83\u4f1a\u6839\u636eluttuce\u3001redisson\u3001jedis \u7684\u53d8\u5316\u5b9e\u4f8b\u5316\u4e0d\u540c\u7684\u5ba2\u6237\u7aef\u94fe\u63a5\u3002\u5b9e\u73b0\u65b9\u5f0f\u662f\u4f7f\u7528\u4e86@Conditional\u7cfb\u5217\u6ce8\u89e3\uff0c\u6709\u65f6\u95f4\u53ef\u4ee5\u5b66\u4e60\u4e00\u4e0b\u8be5\u7cfb\u5217\u7684\u6ce8\u89e3\u3002\u597d\u4e86\u6211\u4eec\u7684SmsAutoConfiguration\u58f0\u660e\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import cn.felord.boot.sms.autoconfigure.core.AliSmsSender ; import cn.felord.boot.sms.autoconfigure.core.SmsProperties ; import cn.felord.boot.sms.autoconfigure.core.SmsSender ; import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty ; import org.springframework.boot.context.properties.EnableConfigurationProperties ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; /** * The type Sms configuration. * * @author Dax * @since 11 :34 2019-04-03 */ @Configuration @EnableConfigurationProperties ( SmsProperties . class ) public class SmsAutoConfiguration { /** * Sms sender sms sender. * * @param smsProperties the sms properties * @return the sms sender */ @Bean @ConditionalOnProperty ( prefix = \"sms.aliyun\" , name = \"sign-name\" , matchIfMissing = false ) public SmsSender aliyunSmsSender ( SmsProperties smsProperties ) { SmsProperties . Aliyun aliyun = smsProperties . getAliyun (); return new AliSmsSender ( smsProperties . isEnabled (), aliyun . getSignName (), aliyun . getAccessKeyId (), aliyun . getAccessKeySecret ()); } } 3.2.3 \u4e3b\u52a8\u751f\u6548\u548c\u88ab\u52a8\u751f\u6548 \u00b6 starter\u96c6\u6210\u5165\u5e94\u7528\u6709\u4e24\u79cd\u65b9\u5f0f\u3002\u6211\u4eec\u4ece\u5e94\u7528\u89c6\u89d2\u6765\u770b\u6709\u4e24\u79cd\uff1a \u4e00\u79cd\u662f\u4e3b\u52a8\u751f\u6548\uff0c\u5728starter\u7ec4\u4ef6\u96c6\u6210\u5165Spring Boot\u5e94\u7528\u65f6\u9700\u8981\u4f60\u4e3b\u52a8\u58f0\u660e\u542f\u7528\u8be5starter\u624d\u751f\u6548\uff0c\u5373\u4f7f\u4f60\u914d\u7f6e\u5b8c\u5168\u3002\u8fd9\u91cc\u4f1a\u7528\u5230@Import\u6ce8\u89e3\uff0c\u5c06\u8be5\u6ce8\u89e3\u6807\u8bb0\u5230\u4f60\u81ea\u5b9a\u4e49\u7684@Enable\u6ce8\u89e3\u4e0a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import cn.felord.boot.sms.autoconfigure.SmsAutoConfiguration ; import org.springframework.context.annotation.Import ; import java.lang.annotation.* ; /** * \u542f\u7528\u77ed\u4fe1\u606f\u914d\u7f6e * * @author Dax * @since 16:03 2019-05-15 */ @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Import ( SmsAutoConfiguration . class ) public @interface EnableSMS { } \u6211\u4eec\u5c06\u8be5\u6ce8\u89e3\u6807\u8bb0\u5165Spring Boot\u5e94\u7528\u5c31\u53ef\u4ee5\u4f7f\u7528\u77ed\u4fe1\u529f\u80fd\u4e86\u3002 \u53e6\u4e00\u79cd\u88ab\u52a8\u751f\u6548\uff0c\u5728starter\u7ec4\u4ef6\u96c6\u6210\u5165Spring Boot\u5e94\u7528\u65f6\u5c31\u5df2\u7ecf\u88ab\u5e94\u7528\u6355\u6349\u5230\u3002\u8fd9\u91cc\u4f1a\u7528\u5230\u7c7b\u4f3cjava\u7684SPI\u673a\u5236\u3002\u5728autoconfigure\u8d44\u6e90\u5305\u4e0b\u65b0\u5efaMETA-INF/spring.factories\u5199\u5165SmsAutoConfiguration\u5168\u9650\u5b9a\u540d\u3002 1 2 org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\ cn.felord.boot.sms.autoconfigure \u591a\u4e2a\u914d\u7f6e\u7c7b\u9017\u53f7\u9694\u5f00\uff0c\u6362\u884c\u4f7f\u7528\u53cd\u659c\u6760\u3002 3.3 sms-spring-boot-starter \u00b6 \u8be5\u6a21\u5757\u662f\u4e00\u4e2a\u7a7ajar\u3002\u5b83\u552f\u4e00\u76ee\u7684\u662f\u63d0\u4f9b\u5fc5\u8981\u7684\u4f9d\u8d56\u9879\u6765\u4f7f\u7528starter\u3002\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u5c31\u662f\u96c6\u6210\u8be5starter\u529f\u80fd\u7684\u552f\u4e00\u5165\u53e3\u3002\u4e0d\u8981\u5bf9\u6dfb\u52a0\u542f\u52a8\u5668\u7684\u9879\u76ee\u505a\u51fa\u5047\u8bbe\u3002\u5982\u679c\u60a8\u81ea\u52a8\u914d\u7f6e\u7684\u4f9d\u8d56\u5e93\u901a\u5e38\u9700\u8981\u5176\u4ed6\u542f\u52a8\u5668\uff0c\u8bf7\u540c\u65f6\u63d0\u53ca\u5b83\u4eec\u3002\u5982\u679c\u53ef\u9009\u4f9d\u8d56\u9879\u7684\u6570\u91cf\u5f88\u9ad8\uff0c\u5219\u63d0\u4f9b\u4e00\u7ec4\u9002\u5f53\u7684\u9ed8\u8ba4\u4f9d\u8d56\u9879\u53ef\u80fd\u5f88\u96be\uff0c\u56e0\u4e3a\u60a8\u5e94\u8be5\u907f\u514d\u5305\u542b\u5bf9\u5178\u578b\u5e93\u7684\u4f7f\u7528\u4e0d\u5fc5\u8981\u7684\u4f9d\u8d56\u9879\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u4e0d\u5e94\u8be5\u5305\u542b\u53ef\u9009\u7684\u4f9d\u8d56\u9879\u3002 \u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0c\u60a8\u7684starter\u5fc5\u987b\u76f4\u63a5\u6216\u95f4\u63a5\u5f15\u7528\u6838\u5fc3Spring Boot\u542f\u52a8\u5668\uff08spring-boot-starter\uff09\uff08\u5982\u679c\u60a8\u7684\u542f\u52a8\u5668\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u542f\u52a8\u5668\uff0c\u5219\u65e0\u9700\u6dfb\u52a0\u5b83\uff09\u3002\u5982\u679c\u53ea\u4f7f\u7528\u81ea\u5b9a\u4e49\u542f\u52a8\u5668\u521b\u5efa\u9879\u76ee\uff0c\u5219Spring Boot\u7684\u6838\u5fc3\u529f\u80fd\u5c06\u901a\u8fc7\u6838\u5fc3\u542f\u52a8\u5668\u7684\u5b58\u5728\u6765\u5b9e\u73b0\u3002 \u6211\u4eec\u7684sms-spring-boot-starter\u4ec5\u4ec5\u662f\u4ee5\u4e0b\u7684pom\uff1a parent 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot </artifactId> <version> 1.0.0.RELEASE </version> <modules> <module> sms-spring-boot-autoconfigure </module> <module> sms-spring-boot-starter </module> </modules> <packaging> pom </packaging> <properties> <java.version> 1.8 </java.version> <spring-boot.version> 2.1.7.RELEASE </spring-boot.version> <aliyun-sms.version> 1.1.0 </aliyun-sms.version> <aliyun-sdk.version> 4.3.8 </aliyun-sdk.version> <lombok.version> 1.18.8 </lombok.version> <sms-starter.version> 1.0.0.RELEASE </sms-starter.version> </properties> <dependencyManagement> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> <version> ${spring-boot.version} </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-autoconfigure </artifactId> <version> ${spring-boot.version} </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-configuration-processor </artifactId> <version> ${spring-boot.version} </version> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-dysmsapi </artifactId> <version> ${aliyun-sms.version} </version> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-core </artifactId> <version> ${aliyun-sdk.version} </version> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <version> ${lombok.version} </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-logging </artifactId> <version> ${spring-boot.version} </version> </dependency> <dependency> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot-autoconfigure </artifactId> <version> ${sms-starter.version} </version> </dependency> </dependencies> </dependencyManagement> </project> sms-spring-boot-starter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot-starter </artifactId> <version> 1.0.0.RELEASE </version> <dependencyManagement> <dependencies> <dependency> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot </artifactId> <version> 1.0.0.RELEASE </version> <type> pom </type> <scope> import </scope> </dependency> </dependencies> </dependencyManagement> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> <dependency> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot-autoconfigure </artifactId> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-dysmsapi </artifactId> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-core </artifactId> </dependency> </dependencies> </project> sms-spring-boot-autoconfigure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot-autoconfigure </artifactId> <version> 1.0.0.RELEASE </version> <packaging> jar </packaging> <dependencyManagement> <dependencies> <dependency> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot </artifactId> <version> 1.0.0.RELEASE </version> <type> pom </type> <scope> import </scope> </dependency> </dependencies> </dependencyManagement> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-autoconfigure </artifactId> <optional> true </optional> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-configuration-processor </artifactId> <optional> true </optional> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-dysmsapi </artifactId> <optional> true </optional> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-core </artifactId> <optional> true </optional> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <scope> compile </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-logging </artifactId> <scope> provided </scope> </dependency> </dependencies> </project> \u5230\u6b64\u4e3a\u6b62\uff0c\u6211\u4eec\u7684\u6574\u4e2a\u77ed\u4fe1Starter\u5c31\u5f00\u53d1\u5b8c\u6210\u4e86\u3002 4. \u603b\u7ed3 \u00b6 \u81ea\u5b9a\u4e49starter\u5bf9\u4e8e\u6211\u4eec\u9879\u76ee\u7ec4\u4ef6\u5316\u3001\u6a21\u5757\u5316\u662f\u6709\u5f88\u5927\u5e2e\u52a9\u7684\u3002\u540c\u65f6\u4e5f\u662fSpring Boot\u4e00\u5927\u7279\u8272\u3002\u76f8\u4fe1\u901a\u8fc7\u5c0f\u80d6\u7684\u4ecb\u7ecd\u4f60\u5df2\u7ecf\u8822\u8822\u6b32\u8bd5\u4e86\uff0c\u90a3\u4e48\u5c31\u8d76\u7d27\u5f00\u59cb\u5199\u4e00\u4e2a\u5427\u3002\u5982\u679c\u89c9\u5f97\u5bf9\u4f60\u6709\u7528\u53ef\u4ee5\u70b9\u4e2a\u8d5e\u5173\u6ce8\u4e00\u4e0b\u3002 sms-spring-boot-starter \u5df2\u7ecf\u4e0a\u4f20\u5230\u7801\u4e91\u4ed3\u5e93\uff0c\u8be5\u9879\u76ee\u7a0d\u52a0\u4fee\u6539\u5c31\u53ef\u4ee5\u4f7f\u7528\u5230\u751f\u4ea7\u3002 \u5730\u5740\uff1a https://gitee.com/felord/sms-spring-boot.git","title":"\u81ea\u5b9a\u4e49starter"},{"location":"self-define-starter/#1","text":"\u968f\u7740Spring\u7684\u65e5\u6e10\u81c3\u80bf\uff0c\u4e3a\u4e86\u7b80\u5316\u914d\u7f6e\u3001\u5f00\u7bb1\u5373\u7528\u3001\u5feb\u901f\u96c6\u6210\uff0cSpring Boot \u6a2a\u7a7a\u51fa\u4e16\u3002\u76ee\u524d\u5df2\u7ecf\u6210\u4e3a Java \u76ee\u524d\u6700\u706b\u70ed\u7684\u6846\u67b6\u4e86\u3002\u5e73\u5e38\u6211\u4eec\u7528Spring Boot\u5f00\u53d1web\u5e94\u7528\u3002Spring mvc \u9ed8\u8ba4\u4f7f\u7528tomcat servlet\u5bb9\u5668\uff0c \u56e0\u4e3aSpring mvc\u7ec4\u4ef6\u96c6\u6210\u4e86spring-boot-starter-tomcat \u3002\u4f46\u662f\u73b0\u5728undertow servlet\u5bb9\u5668\u7684\u6027\u80fd\u975e\u5e38\u597d\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5148\u6392\u9664tomcat\uff1a 1 2 3 4 5 6 7 8 9 10 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> <exclusions> <exclusion> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-tomcat </artifactId> </exclusion> </exclusions> </dependency> \u7136\u540e\u76f4\u63a5\u66ff\u6362\u4e3aundertow: 1 2 3 4 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-undertow </artifactId> </dependency> \u4ee3\u7801\u65e0\u9700\u66f4\u6539\u3002\u8fd9\u5c31\u662f\u7ec4\u4ef6\u5316\u540e\u7684\u597d\u5904\uff1a1.\u53ef\u63d2\u62d4\u30022.\u53ef\u5b9a\u5236\u30023.\u6309\u9700\u96c6\u6210\u3002\u4e3a\u4ec0\u4e48\u80fd\u591f\u505a\u5230\u5feb\u901f\u9002\u914d\uff1f\u6211\u4eec\u8bd5\u60f3\u4e00\u4e2a\u8fd9\u6837\u4e00\u4e2a\u573a\u666f\uff1a\u5047\u5982\u4f60\u7684\u6c7d\u8f66\u8f6e\u5b50\u4e0a\u6709\u4e2a\u87ba\u4e1d\u574f\u4e86\uff0c\u4f60\u8981\u4e70\u4e00\u4e2a\u87ba\u4e1d\u53bb\u81ea\u5df1\u88c5\u3002\u4f60\u53bb\u5e97\u91cc\u53ea\u8981\u62a5\u4e0a\u4f60\u6c7d\u8f66\u7684\u54c1\u724c\u548c\u4f4d\u7f6e\u8001\u677f\u5c31\u80fd\u51c6\u786e\u5730\u77e5\u9053\u4f60\u8981\u7528\u54ea\u79cd\u87ba\u4e1d\u3002\u8fd9\u5c31\u662f\u6807\u51c6\u5df2\u7ecf\u5236\u5b9a\u597d\u7684\u597d\u5904\u3002\u5982\u679c\u6ca1\u6709\u6807\u51c6\uff0c\u4f60\u5f88\u5bb9\u6613\u4e70\u5230\u4e0d\u914d\u5957\u7684\u87ba\u4e1d\uff0c\u4f60\u8981\u4e0d\u505c\u7684\u8bd5\u9519\u3002\u8fd9\u663e\u7136\u4e0d\u662f\u4f60\u60f3\u8981\u7684\u3002\u5982\u679c\u628a\u8fd9\u79cd\u6807\u51c6\u6f5c\u79fb\u9ed8\u5316\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u6c9f\u901a\u4e0a\u5c31\u66f4\u52a0\u5feb\u6377\u65b9\u4fbf\u3002\u6709\u65f6\u5019\u4f60\u5973\u670b\u53cb\u4e00\u4e2a\u773c\u795e\u4f60\u5c31\u77e5\u9053\u5979\u60f3\u8981\u5e72\u4ec0\u4e48\u3002\u6240\u4ee5Spring Boot \u6709\u4e00\u4e2a\u201c\u7ea6\u5b9a\u5927\u4e8e\u914d\u7f6e\u201d\u7684\u89c4\u5219\uff0c\u8ba9\u7a0b\u5e8f\u7ec4\u4ef6\u4e4b\u95f4\u6765\u51cf\u5c11\u914d\u7f6e\uff0c\u964d\u4f4e\u590d\u6742\u6027\u3002\u56e0\u6b64\u4f60\u5728\u5f00\u53d1\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684Spring Boot Starter\u7684\u65f6\u5019\u4e5f\u6700\u597d\u8003\u8651\u4f60\u7684starter\u5982\u4f55\u8fbe\u5230\u4ee5\u4e0a\u7684\u4fbf\u5229\u6027\u3002 \u4e00\u4e2a\u7ec4\u4ef6\u7684\u8bbe\u8ba1\u4e00\u5b9a\u8981\u6709\u6807\u51c6\u548c\u89c4\u5219\u3002Spring Boot Starter\u4e5f\u4e0d\u4f8b\u5916\u3002\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e9b\u5e38\u89c4\u7684\u505a\u6cd5\u3002","title":"1. \u524d\u8a00"},{"location":"self-define-starter/#2-spring-boot","text":"\u4e00\u4e2a\u7ec4\u4ef6\u7684\u8bbe\u8ba1\u4e00\u5b9a\u8981\u6709\u6807\u51c6\u548c\u89c4\u5219\u3002Spring Boot Starter\u4e5f\u4e0d\u4f8b\u5916\u3002\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e9b\u5e38\u89c4\u7684\u505a\u6cd5\u3002","title":"2. spring boot \u7684\u4e00\u4e9b\u7ea6\u5b9a"},{"location":"self-define-starter/#21","text":"\u5982\u679c\u4f60\u5feb\u6709\u5b69\u5b50\u4e86\uff0c\u51fa\u751f\u524d\u4f60\u6bd4\u8f83\u6025\u7684\u4e00\u5b9a\u662f\u8d77\u4e2a\u540d\u5b57\u3002\u59d3\u540d\u6807\u8bc6\u7740\u4f60\u548c\u4f60\u7231\u4eba\u7684\u8840\u7edf\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u8d77\u9694\u58c1\u8001\u738b\u7684\u59d3\u6c0f\uff0c\u80af\u5b9a\u4f1a\u62db\u6765\u5f02\u6837\u7684\u773c\u5149\u3002\u5728maven\u4e2d\uff0cgroupId\u4ee3\u8868\u7740\u59d3\u6c0f\uff0cartifactId\u4ee3\u8868\u7740\u540d\u5b57\u3002Spring Boot\u4e5f\u662f\u6709\u4e00\u4e2a\u547d\u540d\u7684\u5efa\u8bae\u7684\u3002groupId\u4e0d\u8981\u7528\u5b98\u65b9\u7684org.springframework.boot \u800c\u8981\u7528\u4f60\u81ea\u5df1\u72ec\u7279\u7684\u3002\u5bf9\u4e8eartifactId\u7684\u547d\u540d\uff0cSpring Boot\u5b98\u65b9\u5efa\u8bae\u975e\u5b98\u65b9\u7684Starter\u547d\u540d\u683c\u5f0f\u9075\u5faa xxxx-spring-boot-starter \uff0c\u4f8b\u5982 mybatis-spring-boot-starter \u3002\u5b98\u65b9starter\u4f1a\u9075\u5faaspring-boot-starter-xxxx ,\u4f8b\u5982\u4e0a\u9762\u63d0\u5230\u7684spring-boot-starter-undertow \u3002\u5f88\u591a\u5f00\u6e90starter\u4f5c\u8005\u4f1a\u5ffd\u7565\u8fd9\u79cd\u7ea6\u5b9a\uff0c\u663e\u5f97\u4e0d\u591f\u201c\u4e13\u4e1a\u201c\u3002","title":"2.1 \u547d\u540d\u98ce\u683c"},{"location":"self-define-starter/#3-starter","text":"\u63a5\u4e0b\u6765\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u7b2c\u4e09\u65b9\u77ed\u4fe1starter\uff0c\u547d\u540d\u4e3asms-spring-boot-starter \u3002\u6709\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\u9700\u8981\u8fb9\u5199\u8fb9\u6765\u4ecb\u7ecd\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7701\u7565\u4e86samples\u548ctest\u6a21\u5757\u6a21\u7248\uff1a","title":"3. \u81ea\u5b9a\u4e49\u4e00\u4e2aStarter"},{"location":"self-define-starter/#31-sms-spring-boot","text":"sms-spring-boot\u6784\u5efa\u4e00\u4e2a\u9879\u76ee\u91cd\u8981\u7684\u5c31\u662f\u4f9d\u8d56\u7ba1\u7406\u3002\u6240\u4ee5\u5f15\u5165BOM\u662f\u5fc5\u8981\u7684\u3002\u4e3b\u8981\u7ba1\u7406\u8be5starter\u7684\u6240\u6709\u6a21\u5757module\uff0c\u4ee5\u53castarter\u7684\u6240\u6709\u4f9d\u8d56\u751a\u81f3sms-spring-boot-autoconfigure\u90fd\u7531sms-spring-boot\u7ba1\u7406\u3002","title":"3.1 sms-spring-boot"},{"location":"self-define-starter/#32-autoconfigure","text":"\u8be5\u6a21\u5757\u4e3b\u8981\u7528\u6765\u5b9a\u4e49\u914d\u7f6e\u53c2\u6570\u3001\u4ee5\u53ca\u81ea\u52a8\u914d\u7f6e\u5bf9\u5916\u66b4\u9732\u7684\u529f\u80fd\uff08\u4e00\u822c\u662f\u62bd\u8c61\u7684\u63a5\u53e3Spring Bean\uff09\u3002","title":"3.2 autoconfigure"},{"location":"self-define-starter/#321-properties","text":"\u4e00\u822c\u914d\u7f6e\u53c2\u6570\u90fd\u662f\u5728Spring Boot \u7684application.yml\u4e2d\u3002\u6211\u4eec\u4f1a\u5b9a\u4e49\u4e00\u4e2a\u524d\u7f00\u6807\u8bc6\u6765\u4f5c\u4e3a\u540d\u79f0\u7a7a\u95f4\u9694\u79bb\u5404\u4e2a\u7ec4\u4ef6\u7684\u53c2\u6570\u3002\u5bf9\u5e94\u7684\u7ec4\u4ef6\u4f1a\u5b9a\u4e49\u4e00\u4e2aXXXXProperties \u6765\u81ea\u52a8\u88c5\u914d\u8fd9\u4e9b\u53c2\u6570\u3002\u81ea\u52a8\u88c5\u914d\u7684\u673a\u5236\u57fa\u4e8e@ConfigurationProperties\u6ce8\u89e3\uff0c\u8bf7\u6ce8\u610f\u4e00\u5b9a\u8981\u663e\u5f0f\u58f0\u660e\u4f60\u914d\u7f6e\u7684\u524d\u7f00\u6807\u8bc6\uff08prefix\uff09\u3002\u6211\u4eec\u7684sms-spring-boot\u4f1a\u4f5c\u5982\u4e0b\u914d\u7f6e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 import lombok.Data ; import org.springframework.boot.context.properties.ConfigurationProperties ; /** * \u77ed\u4fe1\u914d\u7f6e\u7c7b * * @author Dax * @since 10 :10 2019-04-03 */ @ConfigurationProperties ( prefix = SmsProperties . SMS_PREFIX ) @Data public class SmsProperties { /** * sms prefix. */ static final String SMS_PREFIX = \"sms\" ; private Aliyun aliyun ; /** * sms switch production is set to true, development set to false */ private boolean enabled ; /** * aliyun sms config. */ @Data public static class Aliyun { /** * aliyun sms sign name must not be null */ private String signName ; /** * aliyun sms access key */ private String accessKeyId ; /** * aliyun sms access key secret */ private String accessKeySecret ; } } \u4ee5\u4e0a\u4ee5\u963f\u91cc\u4e91\u7684\u77ed\u4fe1\u529f\u80fd\u4e3a\u4f8b\u4f5c\u914d\u7f6e\uff0c\u5728\u5c06\u6765\u4f7f\u7528\u65f6\u53ea\u9700\u8981\u5728application.yml\u4e2d\u52a0\u5165\u4e0a\u9762\u5bf9\u5e94SmsProperties\u7684\u914d\u7f6e\uff1a 1 2 3 4 5 6 sms : enabled : true aliyun : access-key-id : access-key-secret : sign-name : \u5982\u679c\u4f60\u96c6\u6210\u4e86Spring Boot \u6821\u9a8c\u5e93 \u4f60\u4e5f\u53ef\u4ee5\u5bf9SmsProperties\u8fdb\u884c\u6821\u9a8c\u3002\u5728\u914d\u7f6eapplication.yml\u65f6\u7ec6\u5fc3\u7684java\u5f00\u53d1\u8005\u4f1a\u53d1\u73b0\u53c2\u6570\u914d\u7f6e\u90fd\u6709\u50cf\u4e0b\u9762\u4e00\u6837\u7684\u53c2\u6570\u63cf\u8ff0: \u5c31\u50cfjava\u4e2d\u7684\u6ce8\u91ca\u4e00\u6837\u65b9\u4fbf\u6211\u4eec\u7406\u89e3\u8be5\u914d\u7f6e\u7684\u4f5c\u7528\uff0c\u5176\u5b9e\u8fd9\u4e2a\u5c31\u662fjava\u6ce8\u91ca\u751f\u6210\u7684\u3002\u4f60\u9700\u8981\u4f9d\u8d56 1 2 3 4 5 <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-autoconfigure </artifactId> <optional> true </optional> </dependency> \u7136\u540e\u5c31\u8be5\u4f9d\u8d56\u4f1a\u5bf9SmsProperties \u6210\u5458\u5c5e\u6027\u7684\u6ce8\u91ca\u8fdb\u884c\u63d0\u53d6\u751f\u6210\u4e00\u4e2aspring-configuration-metadata.json\u6587\u4ef6\uff0c\u8fd9\u5c31\u662f\u914d\u7f6e\u63cf\u8ff0\u7684\u5143\u6570\u636e\u6587\u4ef6\u3002Spring Boot\u5b98\u65b9\u4e5f\u5bf9\u6ce8\u91ca\u8fdb\u884c\u4e86\u4e00\u4e9b\u89c4\u5219\u7ea6\u675f\uff1a \u4e0d\u8981\u4ee5\u201cThe\u201d\u6216\u201cA\u201d\u5f00\u5934\u63cf\u8ff0\u3002 \u5bf9\u4e8eboolean\u7c7b\u578b\uff0c\u8bf7\u4f7f\u7528\u201cWhether\u201d \u6216\u201cEnable\u201d\u5f00\u59cb\u63cf\u8ff0\u3002 \u5bf9\u4e8e\u57fa\u4e8e\u96c6\u5408\u7684\u7c7b\u578b\uff0c\u8bf7\u4f7f\u7528\u201cComma-separated list\u201d \u5982\u679c\u9ed8\u8ba4\u65f6\u95f4\u5355\u4f4d\u4e0d\u7b49\u540c\u4e8e\u6beb\u79d2\uff0c\u5219\u4f7f\u7528java.time.Duration\u800c\u4e0d\u662flong\u63cf\u8ff0\u9ed8\u8ba4\u5355\u4f4d\uff0c\u4f8b\u5982\u201c\u5982\u679c\u672a\u6307\u5b9a\u6301\u7eed\u65f6\u95f4\u540e\u7f00\uff0c\u5219\u5c06\u4f7f\u7528\u79d2\u201d\u3002 \u9664\u975e\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\uff0c\u5426\u5219\u4e0d\u8981\u5728\u63cf\u8ff0\u4e2d\u63d0\u4f9b\u9ed8\u8ba4\u503c\u3002 \u8865\u5145\u6211\u4e2a\u4eba\u5efa\u8bae\u63cf\u8ff0\u5c3d\u91cf\u4f7f\u7528\u82f1\u6587\u63cf\u8ff0\u3002","title":"3.2.1 Properties\u914d\u7f6e"},{"location":"self-define-starter/#322","text":"\u62ff\u5230\u914d\u7f6e\u540e\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u6839\u636e\u914d\u7f6e\u6765\u521d\u59cb\u5316\u6211\u4eec\u7684\u529f\u80fd\u63a5\u53e3\uff0c\u6211\u4eec\u4f1a\u62bd\u8c61\u4e00\u4e2a\u77ed\u4fe1\u53d1\u9001\u63a5\u53e3SmsSender\uff0c\u6839\u636e\u77ed\u4fe1\u63d0\u4f9b\u65b9\u7684SDK\u6765\u8fdb\u884c\u529f\u80fd\u8bbe\u8ba1\u3002\u8bf7\u6ce8\u610fautoconfigure\u6a21\u5757\u7684\u4f9d\u8d56\u51e0\u4e4e\u90fd\u662f\u4e0d\u53ef\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u4f9d\u8d56\u5750\u6807\u914d\u7f6eoptional\u4e3atrue \u3002\u529f\u80fd\u63a5\u53e3\u5b9e\u73b0\u5b8c\u540e\u6211\u4eec\u4f1a\u7f16\u5199\u4e00\u4e2a\u81ea\u52a8\u914d\u7f6e\u7c7b SmsAutoConfiguration \u3002\u9664\u4e86@Configuration\u6ce8\u89e3\u5916\uff0c@ConfigurationProperties\u4f1a\u5e2e\u52a9\u6211\u4eec\u5c06\u6211\u4eec\u7684\u914d\u7f6e\u7c7b SmsProperties\u52a0\u8f7d\u8fdb\u6765\u3002\u7136\u540e\u5c06\u6211\u4eec\u9700\u8981\u66b4\u9732\u7684\u529f\u80fd\u63a5\u53e3\u58f0\u660e\u4e3aSpring Bean \u66b4\u9732\u7ed9Spring Boot\u5e94\u7528 \u3002 \u6709\u65f6\u5019\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u6761\u4ef6\u6765\u63a7\u5236SmsAutoConfiguration\u6216\u8005SmsSender \uff0c\u6bd4\u5982\u6839\u636e\u67d0\u4e2a\u6761\u4ef6\u662f\u5426\u52a0\u8f7d\u6216\u52a0\u8f7d\u4e0d\u540c\u7684 SmsSender\u3002\u6709\u65f6\u95f4\u4f60\u53ef\u4ee5\u770b\u770bredis-starter\u5c31\u80fd\u5f88\u660e\u663e\u611f\u89c9\u5230\uff0c\u5b83\u4f1a\u6839\u636eluttuce\u3001redisson\u3001jedis \u7684\u53d8\u5316\u5b9e\u4f8b\u5316\u4e0d\u540c\u7684\u5ba2\u6237\u7aef\u94fe\u63a5\u3002\u5b9e\u73b0\u65b9\u5f0f\u662f\u4f7f\u7528\u4e86@Conditional\u7cfb\u5217\u6ce8\u89e3\uff0c\u6709\u65f6\u95f4\u53ef\u4ee5\u5b66\u4e60\u4e00\u4e0b\u8be5\u7cfb\u5217\u7684\u6ce8\u89e3\u3002\u597d\u4e86\u6211\u4eec\u7684SmsAutoConfiguration\u58f0\u660e\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import cn.felord.boot.sms.autoconfigure.core.AliSmsSender ; import cn.felord.boot.sms.autoconfigure.core.SmsProperties ; import cn.felord.boot.sms.autoconfigure.core.SmsSender ; import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty ; import org.springframework.boot.context.properties.EnableConfigurationProperties ; import org.springframework.context.annotation.Bean ; import org.springframework.context.annotation.Configuration ; /** * The type Sms configuration. * * @author Dax * @since 11 :34 2019-04-03 */ @Configuration @EnableConfigurationProperties ( SmsProperties . class ) public class SmsAutoConfiguration { /** * Sms sender sms sender. * * @param smsProperties the sms properties * @return the sms sender */ @Bean @ConditionalOnProperty ( prefix = \"sms.aliyun\" , name = \"sign-name\" , matchIfMissing = false ) public SmsSender aliyunSmsSender ( SmsProperties smsProperties ) { SmsProperties . Aliyun aliyun = smsProperties . getAliyun (); return new AliSmsSender ( smsProperties . isEnabled (), aliyun . getSignName (), aliyun . getAccessKeyId (), aliyun . getAccessKeySecret ()); } }","title":"3.2.2 \u914d\u7f6e\u81ea\u52a8\u66b4\u9732\u529f\u80fd\u63a5\u53e3"},{"location":"self-define-starter/#323","text":"starter\u96c6\u6210\u5165\u5e94\u7528\u6709\u4e24\u79cd\u65b9\u5f0f\u3002\u6211\u4eec\u4ece\u5e94\u7528\u89c6\u89d2\u6765\u770b\u6709\u4e24\u79cd\uff1a \u4e00\u79cd\u662f\u4e3b\u52a8\u751f\u6548\uff0c\u5728starter\u7ec4\u4ef6\u96c6\u6210\u5165Spring Boot\u5e94\u7528\u65f6\u9700\u8981\u4f60\u4e3b\u52a8\u58f0\u660e\u542f\u7528\u8be5starter\u624d\u751f\u6548\uff0c\u5373\u4f7f\u4f60\u914d\u7f6e\u5b8c\u5168\u3002\u8fd9\u91cc\u4f1a\u7528\u5230@Import\u6ce8\u89e3\uff0c\u5c06\u8be5\u6ce8\u89e3\u6807\u8bb0\u5230\u4f60\u81ea\u5b9a\u4e49\u7684@Enable\u6ce8\u89e3\u4e0a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import cn.felord.boot.sms.autoconfigure.SmsAutoConfiguration ; import org.springframework.context.annotation.Import ; import java.lang.annotation.* ; /** * \u542f\u7528\u77ed\u4fe1\u606f\u914d\u7f6e * * @author Dax * @since 16:03 2019-05-15 */ @Target ( ElementType . TYPE ) @Retention ( RetentionPolicy . RUNTIME ) @Documented @Import ( SmsAutoConfiguration . class ) public @interface EnableSMS { } \u6211\u4eec\u5c06\u8be5\u6ce8\u89e3\u6807\u8bb0\u5165Spring Boot\u5e94\u7528\u5c31\u53ef\u4ee5\u4f7f\u7528\u77ed\u4fe1\u529f\u80fd\u4e86\u3002 \u53e6\u4e00\u79cd\u88ab\u52a8\u751f\u6548\uff0c\u5728starter\u7ec4\u4ef6\u96c6\u6210\u5165Spring Boot\u5e94\u7528\u65f6\u5c31\u5df2\u7ecf\u88ab\u5e94\u7528\u6355\u6349\u5230\u3002\u8fd9\u91cc\u4f1a\u7528\u5230\u7c7b\u4f3cjava\u7684SPI\u673a\u5236\u3002\u5728autoconfigure\u8d44\u6e90\u5305\u4e0b\u65b0\u5efaMETA-INF/spring.factories\u5199\u5165SmsAutoConfiguration\u5168\u9650\u5b9a\u540d\u3002 1 2 org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\ cn.felord.boot.sms.autoconfigure \u591a\u4e2a\u914d\u7f6e\u7c7b\u9017\u53f7\u9694\u5f00\uff0c\u6362\u884c\u4f7f\u7528\u53cd\u659c\u6760\u3002","title":"3.2.3 \u4e3b\u52a8\u751f\u6548\u548c\u88ab\u52a8\u751f\u6548"},{"location":"self-define-starter/#33-sms-spring-boot-starter","text":"\u8be5\u6a21\u5757\u662f\u4e00\u4e2a\u7a7ajar\u3002\u5b83\u552f\u4e00\u76ee\u7684\u662f\u63d0\u4f9b\u5fc5\u8981\u7684\u4f9d\u8d56\u9879\u6765\u4f7f\u7528starter\u3002\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u5c31\u662f\u96c6\u6210\u8be5starter\u529f\u80fd\u7684\u552f\u4e00\u5165\u53e3\u3002\u4e0d\u8981\u5bf9\u6dfb\u52a0\u542f\u52a8\u5668\u7684\u9879\u76ee\u505a\u51fa\u5047\u8bbe\u3002\u5982\u679c\u60a8\u81ea\u52a8\u914d\u7f6e\u7684\u4f9d\u8d56\u5e93\u901a\u5e38\u9700\u8981\u5176\u4ed6\u542f\u52a8\u5668\uff0c\u8bf7\u540c\u65f6\u63d0\u53ca\u5b83\u4eec\u3002\u5982\u679c\u53ef\u9009\u4f9d\u8d56\u9879\u7684\u6570\u91cf\u5f88\u9ad8\uff0c\u5219\u63d0\u4f9b\u4e00\u7ec4\u9002\u5f53\u7684\u9ed8\u8ba4\u4f9d\u8d56\u9879\u53ef\u80fd\u5f88\u96be\uff0c\u56e0\u4e3a\u60a8\u5e94\u8be5\u907f\u514d\u5305\u542b\u5bf9\u5178\u578b\u5e93\u7684\u4f7f\u7528\u4e0d\u5fc5\u8981\u7684\u4f9d\u8d56\u9879\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u4e0d\u5e94\u8be5\u5305\u542b\u53ef\u9009\u7684\u4f9d\u8d56\u9879\u3002 \u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0c\u60a8\u7684starter\u5fc5\u987b\u76f4\u63a5\u6216\u95f4\u63a5\u5f15\u7528\u6838\u5fc3Spring Boot\u542f\u52a8\u5668\uff08spring-boot-starter\uff09\uff08\u5982\u679c\u60a8\u7684\u542f\u52a8\u5668\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u542f\u52a8\u5668\uff0c\u5219\u65e0\u9700\u6dfb\u52a0\u5b83\uff09\u3002\u5982\u679c\u53ea\u4f7f\u7528\u81ea\u5b9a\u4e49\u542f\u52a8\u5668\u521b\u5efa\u9879\u76ee\uff0c\u5219Spring Boot\u7684\u6838\u5fc3\u529f\u80fd\u5c06\u901a\u8fc7\u6838\u5fc3\u542f\u52a8\u5668\u7684\u5b58\u5728\u6765\u5b9e\u73b0\u3002 \u6211\u4eec\u7684sms-spring-boot-starter\u4ec5\u4ec5\u662f\u4ee5\u4e0b\u7684pom\uff1a parent 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot </artifactId> <version> 1.0.0.RELEASE </version> <modules> <module> sms-spring-boot-autoconfigure </module> <module> sms-spring-boot-starter </module> </modules> <packaging> pom </packaging> <properties> <java.version> 1.8 </java.version> <spring-boot.version> 2.1.7.RELEASE </spring-boot.version> <aliyun-sms.version> 1.1.0 </aliyun-sms.version> <aliyun-sdk.version> 4.3.8 </aliyun-sdk.version> <lombok.version> 1.18.8 </lombok.version> <sms-starter.version> 1.0.0.RELEASE </sms-starter.version> </properties> <dependencyManagement> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> <version> ${spring-boot.version} </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-autoconfigure </artifactId> <version> ${spring-boot.version} </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-configuration-processor </artifactId> <version> ${spring-boot.version} </version> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-dysmsapi </artifactId> <version> ${aliyun-sms.version} </version> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-core </artifactId> <version> ${aliyun-sdk.version} </version> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <version> ${lombok.version} </version> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-logging </artifactId> <version> ${spring-boot.version} </version> </dependency> <dependency> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot-autoconfigure </artifactId> <version> ${sms-starter.version} </version> </dependency> </dependencies> </dependencyManagement> </project> sms-spring-boot-starter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot-starter </artifactId> <version> 1.0.0.RELEASE </version> <dependencyManagement> <dependencies> <dependency> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot </artifactId> <version> 1.0.0.RELEASE </version> <type> pom </type> <scope> import </scope> </dependency> </dependencies> </dependencyManagement> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter </artifactId> </dependency> <dependency> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot-autoconfigure </artifactId> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-dysmsapi </artifactId> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-core </artifactId> </dependency> </dependencies> </project> sms-spring-boot-autoconfigure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns= \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" > <modelVersion> 4.0.0 </modelVersion> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot-autoconfigure </artifactId> <version> 1.0.0.RELEASE </version> <packaging> jar </packaging> <dependencyManagement> <dependencies> <dependency> <groupId> cn.felord.boot </groupId> <artifactId> sms-spring-boot </artifactId> <version> 1.0.0.RELEASE </version> <type> pom </type> <scope> import </scope> </dependency> </dependencies> </dependencyManagement> <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-autoconfigure </artifactId> <optional> true </optional> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-configuration-processor </artifactId> <optional> true </optional> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-dysmsapi </artifactId> <optional> true </optional> </dependency> <dependency> <groupId> com.aliyun </groupId> <artifactId> aliyun-java-sdk-core </artifactId> <optional> true </optional> </dependency> <dependency> <groupId> org.projectlombok </groupId> <artifactId> lombok </artifactId> <scope> compile </scope> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-logging </artifactId> <scope> provided </scope> </dependency> </dependencies> </project> \u5230\u6b64\u4e3a\u6b62\uff0c\u6211\u4eec\u7684\u6574\u4e2a\u77ed\u4fe1Starter\u5c31\u5f00\u53d1\u5b8c\u6210\u4e86\u3002","title":"3.3 sms-spring-boot-starter"},{"location":"self-define-starter/#4","text":"\u81ea\u5b9a\u4e49starter\u5bf9\u4e8e\u6211\u4eec\u9879\u76ee\u7ec4\u4ef6\u5316\u3001\u6a21\u5757\u5316\u662f\u6709\u5f88\u5927\u5e2e\u52a9\u7684\u3002\u540c\u65f6\u4e5f\u662fSpring Boot\u4e00\u5927\u7279\u8272\u3002\u76f8\u4fe1\u901a\u8fc7\u5c0f\u80d6\u7684\u4ecb\u7ecd\u4f60\u5df2\u7ecf\u8822\u8822\u6b32\u8bd5\u4e86\uff0c\u90a3\u4e48\u5c31\u8d76\u7d27\u5f00\u59cb\u5199\u4e00\u4e2a\u5427\u3002\u5982\u679c\u89c9\u5f97\u5bf9\u4f60\u6709\u7528\u53ef\u4ee5\u70b9\u4e2a\u8d5e\u5173\u6ce8\u4e00\u4e0b\u3002 sms-spring-boot-starter \u5df2\u7ecf\u4e0a\u4f20\u5230\u7801\u4e91\u4ed3\u5e93\uff0c\u8be5\u9879\u76ee\u7a0d\u52a0\u4fee\u6539\u5c31\u53ef\u4ee5\u4f7f\u7528\u5230\u751f\u4ea7\u3002 \u5730\u5740\uff1a https://gitee.com/felord/sms-spring-boot.git","title":"4. \u603b\u7ed3"},{"location":"springboot-profile/","text":"springboot\u83b7\u53d6active profile \u00b6 \u5982\u4f55\u901a\u8fc7\u4ee3\u7801\u83b7\u53d6\u5f53\u524d\u6fc0\u6d3b\u7684profile \u4e0d\u540c\u7684profile\u73af\u5883\u4e0b\u8fd0\u884c\u4e0d\u540c\u7684code \u65b9\u5f0f\u4e00 \u00b6 1 2 WebApplicationContext wac = WebApplicationContextUtils . getWebApplicationContext ( request . getServletContext ()); String profile = wac . getEnvironment (). getActiveProfiles ()[ 0 ]; \u65b9\u5f0f\u4e8c \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.context.ApplicationContext ; import org.springframework.context.annotation.Configuration ; /** * @author wangjiuzhou (835540436@qq.com) * @date 2018/11/07 * * \u83b7\u53d6\u5f53\u524d\u9879\u76ee\u73af\u5883\uff1alocal\u3001dev\u3001test\u3001pro */ @Configuration public class ProfileConfig { public static final String LOCAL_PROFILE = \"local\" ; public static final String DEV_PROFILE = \"dev\" ; public static final String TEST_PROFILE = \"test\" ; public static final String PRO_PROFILE = \"pro\" ; @Autowired private ApplicationContext context ; public String getActiveProfile () { return context . getEnvironment (). getActiveProfiles ()[ 0 ]; } } \u65b9\u5f0f\u4e09 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 @Component public class SpringContextUtil implements ApplicationContextAware { private static ApplicationContext context = null ; @Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { context = applicationContext ; } //\u83b7\u53d6applicationContext public static ApplicationContext getApplicationContext () { return applicationContext ; } //\u901a\u8fc7name\u83b7\u53d6 Bean. public static Object getBean ( String name ){ return getApplicationContext (). getBean ( name ); } //\u901a\u8fc7class\u83b7\u53d6Bean. public static < T > T getBean ( Class < T > clazz ){ return getApplicationContext (). getBean ( clazz ); } //\u901a\u8fc7name,\u4ee5\u53caClazz\u8fd4\u56de\u6307\u5b9a\u7684Bean public static < T > T getBean ( String name , Class < T > clazz ){ return getApplicationContext (). getBean ( name , clazz ); } // \u56fd\u9645\u5316\u4f7f\u7528 public static String getMessage ( String key ) { return context . getMessage ( key , null , Locale . getDefault ()); } // \u83b7\u53d6\u5f53\u524d\u73af\u5883 public static String getActiveProfile () { return context . getEnvironment (). getActiveProfiles ()[ 0 ]; } }","title":"springboot\u83b7\u53d6profile"},{"location":"springboot-profile/#springbootactive-profile","text":"\u5982\u4f55\u901a\u8fc7\u4ee3\u7801\u83b7\u53d6\u5f53\u524d\u6fc0\u6d3b\u7684profile \u4e0d\u540c\u7684profile\u73af\u5883\u4e0b\u8fd0\u884c\u4e0d\u540c\u7684code","title":"springboot\u83b7\u53d6active profile"},{"location":"springboot-profile/#_1","text":"1 2 WebApplicationContext wac = WebApplicationContextUtils . getWebApplicationContext ( request . getServletContext ()); String profile = wac . getEnvironment (). getActiveProfiles ()[ 0 ];","title":"\u65b9\u5f0f\u4e00"},{"location":"springboot-profile/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.context.ApplicationContext ; import org.springframework.context.annotation.Configuration ; /** * @author wangjiuzhou (835540436@qq.com) * @date 2018/11/07 * * \u83b7\u53d6\u5f53\u524d\u9879\u76ee\u73af\u5883\uff1alocal\u3001dev\u3001test\u3001pro */ @Configuration public class ProfileConfig { public static final String LOCAL_PROFILE = \"local\" ; public static final String DEV_PROFILE = \"dev\" ; public static final String TEST_PROFILE = \"test\" ; public static final String PRO_PROFILE = \"pro\" ; @Autowired private ApplicationContext context ; public String getActiveProfile () { return context . getEnvironment (). getActiveProfiles ()[ 0 ]; } }","title":"\u65b9\u5f0f\u4e8c"},{"location":"springboot-profile/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 @Component public class SpringContextUtil implements ApplicationContextAware { private static ApplicationContext context = null ; @Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { context = applicationContext ; } //\u83b7\u53d6applicationContext public static ApplicationContext getApplicationContext () { return applicationContext ; } //\u901a\u8fc7name\u83b7\u53d6 Bean. public static Object getBean ( String name ){ return getApplicationContext (). getBean ( name ); } //\u901a\u8fc7class\u83b7\u53d6Bean. public static < T > T getBean ( Class < T > clazz ){ return getApplicationContext (). getBean ( clazz ); } //\u901a\u8fc7name,\u4ee5\u53caClazz\u8fd4\u56de\u6307\u5b9a\u7684Bean public static < T > T getBean ( String name , Class < T > clazz ){ return getApplicationContext (). getBean ( name , clazz ); } // \u56fd\u9645\u5316\u4f7f\u7528 public static String getMessage ( String key ) { return context . getMessage ( key , null , Locale . getDefault ()); } // \u83b7\u53d6\u5f53\u524d\u73af\u5883 public static String getActiveProfile () { return context . getEnvironment (). getActiveProfiles ()[ 0 ]; } }","title":"\u65b9\u5f0f\u4e09"},{"location":"springboot-session/","text":"\u6709\u7684\u4eba\u53ef\u80fd\u4f1a\u89c9\u5f97\u9898\u76ee\u6709\u70b9\u5938\u5f20\uff0c\u5176\u5b9e\u4e0d\u5938\u5f20\uff0c\u9898\u76ee\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u4fee\u8f9e\u624b\u6cd5\uff01\u8ba4\u771f\u8bfb\u5b8c\u672c\u6587\uff0c\u4f60\u5c31\u77e5\u9053\u677e\u54e5\u8bf4\u7684\u662f\u5bf9\u7684\u4e86\uff01 \u5728\u4f20\u7edf\u7684\u5355\u670d\u52a1\u67b6\u6784\u4e2d\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u53ea\u6709\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u4e0d\u5b58\u5728 Session \u5171\u4eab\u95ee\u9898\uff0c\u4f46\u662f\u5728\u5206\u5e03\u5f0f/\u96c6\u7fa4\u9879\u76ee\u4e2d\uff0cSession \u5171\u4eab\u5219\u662f\u4e00\u4e2a\u5fc5\u987b\u9762\u5bf9\u7684\u95ee\u9898\uff0c\u5148\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u67b6\u6784\u56fe\uff1a \u5728\u8fd9\u6837\u7684\u67b6\u6784\u4e2d\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e9b\u5355\u670d\u52a1\u4e2d\u4e0d\u5b58\u5728\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u5ba2\u6237\u7aef\u53d1\u8d77\u4e00\u4e2a\u8bf7\u6c42\uff0c\u8fd9\u4e2a\u8bf7\u6c42\u5230\u8fbe Nginx \u4e0a\u4e4b\u540e\uff0c\u88ab Nginx \u8f6c\u53d1\u5230 Tomcat A \u4e0a\uff0c\u7136\u540e\u5728 Tomcat A \u4e0a\u5f80 session \u4e2d\u4fdd\u5b58\u4e86\u4e00\u4efd\u6570\u636e\uff0c\u4e0b\u6b21\u53c8\u6765\u4e00\u4e2a\u8bf7\u6c42\uff0c\u8fd9\u4e2a\u8bf7\u6c42\u88ab\u8f6c\u53d1\u5230 Tomcat B \u4e0a\uff0c\u6b64\u65f6\u518d\u53bb Session \u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u53d1\u73b0\u6ca1\u6709\u4e4b\u524d\u7684\u6570\u636e\u3002\u5bf9\u4e8e\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u89e3\u51b3\uff0c\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5c06\u5404\u4e2a\u670d\u52a1\u4e4b\u95f4\u9700\u8981\u5171\u4eab\u7684\u6570\u636e\uff0c\u4fdd\u5b58\u5230\u4e00\u4e2a\u516c\u5171\u7684\u5730\u65b9__\uff08\u4e3b\u6d41\u65b9\u6848\u5c31\u662f Redis\uff09__\uff1a \u5f53\u6240\u6709 Tomcat \u9700\u8981\u5f80 Session \u4e2d\u5199\u6570\u636e\u65f6\uff0c\u90fd\u5f80 Redis \u4e2d\u5199\uff0c\u5f53\u6240\u6709 Tomcat \u9700\u8981\u8bfb\u6570\u636e\u65f6\uff0c\u90fd\u4ece Redis \u4e2d\u8bfb\u3002\u8fd9\u6837\uff0c\u4e0d\u540c\u7684\u670d\u52a1\u5c31\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684 Session \u6570\u636e\u4e86\u3002 \u8fd9\u6837\u7684\u65b9\u6848\uff0c\u53ef\u4ee5\u7531\u5f00\u53d1\u8005\u624b\u52a8\u5b9e\u73b0\uff0c\u5373\u624b\u52a8\u5f80 Redis \u4e2d\u5b58\u50a8\u6570\u636e\uff0c\u624b\u52a8\u4ece Redis \u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u76f8\u5f53\u4e8e\u4f7f\u7528\u4e00\u4e9b Redis \u5ba2\u6237\u7aef\u5de5\u5177\u6765\u5b9e\u73b0\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u6beb\u65e0\u7591\u95ee\uff0c\u624b\u52a8\u5b9e\u73b0\u5de5\u4f5c\u91cf\u8fd8\u662f\u86ee\u5927\u7684\u3002 \u4e00\u4e2a\u7b80\u5316\u7684\u65b9\u6848\u5c31\u662f\u4f7f\u7528 Spring Session \u6765\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\uff0cSpring Session \u5c31\u662f\u4f7f\u7528 Spring \u4e2d\u7684\u4ee3\u7406\u8fc7\u6ee4\u5668\uff0c\u5c06\u6240\u6709\u7684 Session \u64cd\u4f5c\u62e6\u622a\u4e0b\u6765\uff0c\u81ea\u52a8\u7684\u5c06\u6570\u636e \u540c\u6b65\u5230 Redis \u4e2d\uff0c\u6216\u8005\u81ea\u52a8\u7684\u4ece Redis \u4e2d\u8bfb\u53d6\u6570\u636e\u3002 \u5bf9\u4e8e\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u6240\u6709\u5173\u4e8e Session \u540c\u6b65\u7684\u64cd\u4f5c\u90fd\u662f\u900f\u660e\u7684\uff0c\u5f00\u53d1\u8005\u4f7f\u7528 Spring Session\uff0c\u4e00\u65e6\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u5177\u4f53\u7684\u7528\u6cd5\u5c31\u50cf\u4f7f\u7528\u4e00\u4e2a\u666e\u901a\u7684 Session \u4e00\u6837\u3002 1. \u5b9e\u6218 \u00b6 1.1 \u521b\u5efa\u5de5\u7a0b \u00b6 \u9996\u5148 \u521b\u5efa\u4e00\u4e2a Spring Boot \u5de5\u7a0b\uff0c\u5f15\u5165 Web\u3001Spring Session \u4ee5\u53ca Redis: pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-redis </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> org.springframework.session </groupId> <artifactId> spring-session-data-redis </artifactId> </dependency> </dependencies> \u6ce8\u610f \u8fd9\u91cc\u6211\u4f7f\u7528\u7684 Spring Boot \u7248\u672c\u662f 2.1.4 \uff0c\u5982\u679c\u4f7f\u7528\u5f53\u524d\u6700\u65b0\u7248 Spring Boot2.1.5 \u7684\u8bdd\uff0c\u9664\u4e86\u4e0a\u9762\u8fd9\u4e9b\u4f9d\u8d56\u4e4b\u5916\uff0c\u9700\u8981\u989d\u5916\u6dfb\u52a0 Spring Security \u4f9d\u8d56\uff08\u5176\u4ed6\u64cd\u4f5c\u4e0d\u53d7\u5f71\u54cd\uff0c\u4ec5\u4ec5\u53ea\u662f\u591a\u4e86\u4e00\u4e2a\u4f9d\u8d56\uff0c\u5f53\u7136\u4e5f\u591a\u4e86 Spring Security \u7684\u4e00\u4e9b\u9ed8\u8ba4\u8ba4\u8bc1\u6d41\u7a0b\uff09\u3002 1.2 \u914d\u7f6e Redis \u00b6 application.properties 1 2 3 4 spring.redis.host = 192.168.66.128 spring.redis.port = 6379 spring.redis.password = 123 spring.redis.database = 0 \u8fd9\u91cc\u7684 Redis \uff0c\u6211\u867d\u7136\u914d\u7f6e\u4e86\u56db\u884c\uff0c\u4f46\u662f\u8003\u8651\u5230\u7aef\u53e3\u9ed8\u8ba4\u5c31\u662f 6379 \uff0cdatabase \u9ed8\u8ba4\u5c31\u662f 0\uff0c\u6240\u4ee5\u771f\u6b63\u8981\u914d\u7f6e\u7684\uff0c\u5176\u5b9e\u5c31\u662f\u4e24\u884c\u3002 1.3 \u4f7f\u7528 \u00b6 \u914d\u7f6e\u5b8c\u6210\u540e \uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 Spring Session \u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u4f7f\u7528\u666e\u901a\u7684 HttpSession \uff0c\u5176\u4ed6\u7684 Session \u540c\u6b65\u5230 Redis \u7b49\u64cd\u4f5c\uff0c\u6846\u67b6\u5df2\u7ecf\u81ea\u52a8\u5e2e\u4f60\u5b8c\u6210\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import java.util.List ; import java.util.Map ; import java.util.Set ; import java.util.StringJoiner ; import javax.servlet.http.HttpSession ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RestController ; import com.example.demo.processor.PriceCommonProcessor ; import lombok.extern.slf4j.Slf4j ; @RestController @Slf4j public class TestController { @Value ( \"${server.port}\" ) Integer port ; @GetMapping ( \"set\" ) public String set ( HttpSession session ) { session . setAttribute ( \"user\" , \"wms\" ); return String . valueOf ( port ); } } \u8003\u8651\u5230\u4e00\u4f1a Spring Boot \u5c06\u4ee5\u96c6\u7fa4\u7684\u65b9\u5f0f\u542f\u52a8 \uff0c\u4e3a\u4e86\u83b7\u53d6\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u5230\u5e95\u662f\u54ea\u4e00\u4e2a Spring Boot \u63d0\u4f9b\u7684\u670d\u52a1\uff0c\u9700\u8981\u5728\u6bcf\u6b21\u8bf7\u6c42\u65f6\u8fd4\u56de\u5f53\u524d\u670d\u52a1\u7684\u7aef\u53e3\u53f7\uff0c\u56e0\u6b64\u8fd9\u91cc\u6211\u6ce8\u5165\u4e86 server.port \u3002 1.4 \u5f15\u5165nginx \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 upstream bigbay-h5-payment { ip_hash; server 192.168.5.203:8887; server 192.168.0.71:8887; } server { listen 80; server_name bigbay-h5.qingclass.com; location / { proxy_pass http://bigbay-h5-payment; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; keepalive_timeout 3000; proxy_connect_timeout 3000; proxy_read_timeout 3000; proxy_redirect default; } } \u5728\u8fd9\u6bb5\u914d\u7f6e\u4e2d\uff1a upstream \u8868\u793a\u914d\u7f6e\u4e0a\u6e38\u670d\u52a1\u5668 javaboy.org \u8868\u793a\u670d\u52a1\u5668\u96c6\u7fa4\u7684\u540d\u5b57\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u968f\u610f\u53d6\u540d\u5b57 upstream \u91cc\u8fb9\u914d\u7f6e\u7684\u662f\u4e00\u4e2a\u4e2a\u7684\u5355\u72ec\u670d\u52a1 weight \u8868\u793a\u670d\u52a1\u7684\u6743\u91cd\uff0c\u610f\u5473\u8005\u5c06\u6709\u591a\u5c11\u6bd4\u4f8b\u7684\u8bf7\u6c42\u4ece Nginx \u4e0a\u8f6c\u53d1\u5230\u8be5\u670d\u52a1\u4e0a location \u4e2d\u7684 proxy_pass \u8868\u793a\u8bf7\u6c42\u8f6c\u53d1\u7684\u5730\u5740\uff0c / \u8868\u793a\u62e6\u622a\u5230\u6240\u6709\u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u8f6c\u53d1\u5230\u521a\u521a\u914d\u7f6e\u597d\u7684\u670d\u52a1\u96c6\u7fa4\u4e2d proxy_redirect \u8868\u793a\u8bbe\u7f6e\u5f53\u53d1\u751f\u91cd\u5b9a\u5411\u8bf7\u6c42\u65f6\uff0cnginx \u81ea\u52a8\u4fee\u6b63\u54cd\u5e94\u5934\u6570\u636e\uff08\u9ed8\u8ba4\u662f Tomcat \u8fd4\u56de\u91cd\u5b9a\u5411\uff0c\u6b64\u65f6\u91cd\u5b9a\u5411\u7684\u5730\u5740\u662f Tomcat \u7684\u5730\u5740\uff0c\u6211\u4eec\u9700\u8981\u5c06\u4e4b\u4fee\u6539\u4f7f\u4e4b\u6210\u4e3a Nginx \u7684\u5730\u5740\uff09\u3002 \u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u5c06\u672c\u5730\u7684 Spring Boot \u6253\u5305\u597d\u7684 jar \u4e0a\u4f20\u5230 Linux \uff0c\u7136\u540e\u5728 Linux \u4e0a\u5206\u522b\u542f\u52a8\u4e24\u4e2a Spring Boot \u5b9e\u4f8b\uff1a 1 2 nohup java -jar sessionshare-0.0.1-SNAPSHOT.jar --server.port = 8080 > catalina.out 2 > & 1 & nohup java -jar sessionshare-0.0.1-SNAPSHOT.jar --server.port = 8081 > catalina.out 2 > & 1 & \u5176\u4e2d nohup \u8868\u793a\u5f53\u7ec8\u7aef\u5173\u95ed\u65f6\uff0cSpring Boot \u4e0d\u8981\u505c\u6b62\u8fd0\u884c & \u8868\u793a\u8ba9 Spring Boot \u5728\u540e\u53f0\u542f\u52a8 2>&1 \u8f93\u51fa\u6240\u6709\u7684\u65e5\u5fd7\u6587\u4ef6 \u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u91cd\u542f Nginx 1 nginx - s reload 2. \u603b\u7ed3 \u00b6 \u672c\u6587\u4e3b\u8981\u5411\u5927\u5bb6\u4ecb\u7ecd\u4e86 Spring Session \u7684\u4f7f\u7528\uff0c\u53e6\u5916\u4e5f\u6d89\u53ca\u5230\u4e00\u4e9b Nginx \u7684\u4f7f\u7528 \uff0c\u867d\u7136\u672c\u6587\u8f83\u957f\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a Spring Session \u7684\u914d\u7f6e\u6ca1\u5565\u3002 \u6211\u4eec\u5199\u4e86\u4e00\u4e9b\u4ee3\u7801\uff0c\u4e5f\u505a\u4e86\u4e00\u4e9b\u914d\u7f6e\uff0c\u4f46\u662f\u5168\u90fd\u548c Spring Session \u65e0\u5173\uff0c\u914d\u7f6e\u662f\u914d\u7f6e Redis\uff0c\u4ee3\u7801\u5c31\u662f\u666e\u901a\u7684 HttpSession\uff0c\u548c Spring Session \u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff01 \u552f\u4e00\u548c Spring Session \u76f8\u5173\u7684\uff0c\u53ef\u80fd\u5c31\u662f\u6211\u5728\u4e00\u5f00\u59cb\u5f15\u5165\u4e86 Spring Session \u7684\u4f9d\u8d56\u5427\uff01 \u5982\u679c\u5927\u5bb6\u6ca1\u6709\u5728 SSM \u67b6\u6784\u4e2d\u7528\u8fc7 Spring Session \uff0c\u53ef\u80fd\u4e0d\u592a\u597d\u7406\u89e3\u6211\u4eec\u5728 Spring Boot \u4e2d\u4f7f\u7528 Spring Session \u6709\u591a\u4e48\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5728 SSM \u67b6\u6784\u4e2d\uff0cSpring Session \u7684\u4f7f\u7528\u8981\u914d\u7f6e\u4e09\u4e2a\u5730\u65b9 \uff0c\u4e00\u4e2a\u662f web.xml \u914d\u7f6e\u4ee3\u7406\u8fc7\u6ee4\u5668\uff0c\u7136\u540e\u5728 Spring \u5bb9\u5668\u4e2d\u914d\u7f6e Redis\uff0c\u6700\u540e\u518d\u914d\u7f6e Spring Session\uff0c\u6b65\u9aa4\u8fd8\u662f\u6709\u4e9b\u7e41\u7410\u7684\uff0c\u800c Spring Boot \u4e2d\u76f4\u63a5\u5e2e\u6211\u4eec\u7701\u53bb\u4e86\u8fd9\u4e9b\u7e41\u7410\u7684\u6b65\u9aa4\uff01\u4e0d\u7528\u518d\u53bb\u914d\u7f6e Spring Session\u3002","title":"session\u5171\u4eab"},{"location":"springboot-session/#1","text":"","title":"1. \u5b9e\u6218"},{"location":"springboot-session/#11","text":"\u9996\u5148 \u521b\u5efa\u4e00\u4e2a Spring Boot \u5de5\u7a0b\uff0c\u5f15\u5165 Web\u3001Spring Session \u4ee5\u53ca Redis: pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <dependencies> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-data-redis </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> org.springframework.session </groupId> <artifactId> spring-session-data-redis </artifactId> </dependency> </dependencies> \u6ce8\u610f \u8fd9\u91cc\u6211\u4f7f\u7528\u7684 Spring Boot \u7248\u672c\u662f 2.1.4 \uff0c\u5982\u679c\u4f7f\u7528\u5f53\u524d\u6700\u65b0\u7248 Spring Boot2.1.5 \u7684\u8bdd\uff0c\u9664\u4e86\u4e0a\u9762\u8fd9\u4e9b\u4f9d\u8d56\u4e4b\u5916\uff0c\u9700\u8981\u989d\u5916\u6dfb\u52a0 Spring Security \u4f9d\u8d56\uff08\u5176\u4ed6\u64cd\u4f5c\u4e0d\u53d7\u5f71\u54cd\uff0c\u4ec5\u4ec5\u53ea\u662f\u591a\u4e86\u4e00\u4e2a\u4f9d\u8d56\uff0c\u5f53\u7136\u4e5f\u591a\u4e86 Spring Security \u7684\u4e00\u4e9b\u9ed8\u8ba4\u8ba4\u8bc1\u6d41\u7a0b\uff09\u3002","title":"1.1 \u521b\u5efa\u5de5\u7a0b"},{"location":"springboot-session/#12-redis","text":"application.properties 1 2 3 4 spring.redis.host = 192.168.66.128 spring.redis.port = 6379 spring.redis.password = 123 spring.redis.database = 0 \u8fd9\u91cc\u7684 Redis \uff0c\u6211\u867d\u7136\u914d\u7f6e\u4e86\u56db\u884c\uff0c\u4f46\u662f\u8003\u8651\u5230\u7aef\u53e3\u9ed8\u8ba4\u5c31\u662f 6379 \uff0cdatabase \u9ed8\u8ba4\u5c31\u662f 0\uff0c\u6240\u4ee5\u771f\u6b63\u8981\u914d\u7f6e\u7684\uff0c\u5176\u5b9e\u5c31\u662f\u4e24\u884c\u3002","title":"1.2 \u914d\u7f6e Redis"},{"location":"springboot-session/#13","text":"\u914d\u7f6e\u5b8c\u6210\u540e \uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 Spring Session \u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u4f7f\u7528\u666e\u901a\u7684 HttpSession \uff0c\u5176\u4ed6\u7684 Session \u540c\u6b65\u5230 Redis \u7b49\u64cd\u4f5c\uff0c\u6846\u67b6\u5df2\u7ecf\u81ea\u52a8\u5e2e\u4f60\u5b8c\u6210\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import java.util.List ; import java.util.Map ; import java.util.Set ; import java.util.StringJoiner ; import javax.servlet.http.HttpSession ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.web.bind.annotation.GetMapping ; import org.springframework.web.bind.annotation.RestController ; import com.example.demo.processor.PriceCommonProcessor ; import lombok.extern.slf4j.Slf4j ; @RestController @Slf4j public class TestController { @Value ( \"${server.port}\" ) Integer port ; @GetMapping ( \"set\" ) public String set ( HttpSession session ) { session . setAttribute ( \"user\" , \"wms\" ); return String . valueOf ( port ); } } \u8003\u8651\u5230\u4e00\u4f1a Spring Boot \u5c06\u4ee5\u96c6\u7fa4\u7684\u65b9\u5f0f\u542f\u52a8 \uff0c\u4e3a\u4e86\u83b7\u53d6\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u5230\u5e95\u662f\u54ea\u4e00\u4e2a Spring Boot \u63d0\u4f9b\u7684\u670d\u52a1\uff0c\u9700\u8981\u5728\u6bcf\u6b21\u8bf7\u6c42\u65f6\u8fd4\u56de\u5f53\u524d\u670d\u52a1\u7684\u7aef\u53e3\u53f7\uff0c\u56e0\u6b64\u8fd9\u91cc\u6211\u6ce8\u5165\u4e86 server.port \u3002","title":"1.3 \u4f7f\u7528"},{"location":"springboot-session/#14-nginx","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 upstream bigbay-h5-payment { ip_hash; server 192.168.5.203:8887; server 192.168.0.71:8887; } server { listen 80; server_name bigbay-h5.qingclass.com; location / { proxy_pass http://bigbay-h5-payment; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; keepalive_timeout 3000; proxy_connect_timeout 3000; proxy_read_timeout 3000; proxy_redirect default; } } \u5728\u8fd9\u6bb5\u914d\u7f6e\u4e2d\uff1a upstream \u8868\u793a\u914d\u7f6e\u4e0a\u6e38\u670d\u52a1\u5668 javaboy.org \u8868\u793a\u670d\u52a1\u5668\u96c6\u7fa4\u7684\u540d\u5b57\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u968f\u610f\u53d6\u540d\u5b57 upstream \u91cc\u8fb9\u914d\u7f6e\u7684\u662f\u4e00\u4e2a\u4e2a\u7684\u5355\u72ec\u670d\u52a1 weight \u8868\u793a\u670d\u52a1\u7684\u6743\u91cd\uff0c\u610f\u5473\u8005\u5c06\u6709\u591a\u5c11\u6bd4\u4f8b\u7684\u8bf7\u6c42\u4ece Nginx \u4e0a\u8f6c\u53d1\u5230\u8be5\u670d\u52a1\u4e0a location \u4e2d\u7684 proxy_pass \u8868\u793a\u8bf7\u6c42\u8f6c\u53d1\u7684\u5730\u5740\uff0c / \u8868\u793a\u62e6\u622a\u5230\u6240\u6709\u7684\u8bf7\u6c42\uff0c\u8f6c\u53d1\u8f6c\u53d1\u5230\u521a\u521a\u914d\u7f6e\u597d\u7684\u670d\u52a1\u96c6\u7fa4\u4e2d proxy_redirect \u8868\u793a\u8bbe\u7f6e\u5f53\u53d1\u751f\u91cd\u5b9a\u5411\u8bf7\u6c42\u65f6\uff0cnginx \u81ea\u52a8\u4fee\u6b63\u54cd\u5e94\u5934\u6570\u636e\uff08\u9ed8\u8ba4\u662f Tomcat \u8fd4\u56de\u91cd\u5b9a\u5411\uff0c\u6b64\u65f6\u91cd\u5b9a\u5411\u7684\u5730\u5740\u662f Tomcat \u7684\u5730\u5740\uff0c\u6211\u4eec\u9700\u8981\u5c06\u4e4b\u4fee\u6539\u4f7f\u4e4b\u6210\u4e3a Nginx \u7684\u5730\u5740\uff09\u3002 \u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u5c06\u672c\u5730\u7684 Spring Boot \u6253\u5305\u597d\u7684 jar \u4e0a\u4f20\u5230 Linux \uff0c\u7136\u540e\u5728 Linux \u4e0a\u5206\u522b\u542f\u52a8\u4e24\u4e2a Spring Boot \u5b9e\u4f8b\uff1a 1 2 nohup java -jar sessionshare-0.0.1-SNAPSHOT.jar --server.port = 8080 > catalina.out 2 > & 1 & nohup java -jar sessionshare-0.0.1-SNAPSHOT.jar --server.port = 8081 > catalina.out 2 > & 1 & \u5176\u4e2d nohup \u8868\u793a\u5f53\u7ec8\u7aef\u5173\u95ed\u65f6\uff0cSpring Boot \u4e0d\u8981\u505c\u6b62\u8fd0\u884c & \u8868\u793a\u8ba9 Spring Boot \u5728\u540e\u53f0\u542f\u52a8 2>&1 \u8f93\u51fa\u6240\u6709\u7684\u65e5\u5fd7\u6587\u4ef6 \u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u91cd\u542f Nginx 1 nginx - s reload","title":"1.4 \u5f15\u5165nginx"},{"location":"springboot-session/#2","text":"\u672c\u6587\u4e3b\u8981\u5411\u5927\u5bb6\u4ecb\u7ecd\u4e86 Spring Session \u7684\u4f7f\u7528\uff0c\u53e6\u5916\u4e5f\u6d89\u53ca\u5230\u4e00\u4e9b Nginx \u7684\u4f7f\u7528 \uff0c\u867d\u7136\u672c\u6587\u8f83\u957f\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a Spring Session \u7684\u914d\u7f6e\u6ca1\u5565\u3002 \u6211\u4eec\u5199\u4e86\u4e00\u4e9b\u4ee3\u7801\uff0c\u4e5f\u505a\u4e86\u4e00\u4e9b\u914d\u7f6e\uff0c\u4f46\u662f\u5168\u90fd\u548c Spring Session \u65e0\u5173\uff0c\u914d\u7f6e\u662f\u914d\u7f6e Redis\uff0c\u4ee3\u7801\u5c31\u662f\u666e\u901a\u7684 HttpSession\uff0c\u548c Spring Session \u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff01 \u552f\u4e00\u548c Spring Session \u76f8\u5173\u7684\uff0c\u53ef\u80fd\u5c31\u662f\u6211\u5728\u4e00\u5f00\u59cb\u5f15\u5165\u4e86 Spring Session \u7684\u4f9d\u8d56\u5427\uff01 \u5982\u679c\u5927\u5bb6\u6ca1\u6709\u5728 SSM \u67b6\u6784\u4e2d\u7528\u8fc7 Spring Session \uff0c\u53ef\u80fd\u4e0d\u592a\u597d\u7406\u89e3\u6211\u4eec\u5728 Spring Boot \u4e2d\u4f7f\u7528 Spring Session \u6709\u591a\u4e48\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5728 SSM \u67b6\u6784\u4e2d\uff0cSpring Session \u7684\u4f7f\u7528\u8981\u914d\u7f6e\u4e09\u4e2a\u5730\u65b9 \uff0c\u4e00\u4e2a\u662f web.xml \u914d\u7f6e\u4ee3\u7406\u8fc7\u6ee4\u5668\uff0c\u7136\u540e\u5728 Spring \u5bb9\u5668\u4e2d\u914d\u7f6e Redis\uff0c\u6700\u540e\u518d\u914d\u7f6e Spring Session\uff0c\u6b65\u9aa4\u8fd8\u662f\u6709\u4e9b\u7e41\u7410\u7684\uff0c\u800c Spring Boot \u4e2d\u76f4\u63a5\u5e2e\u6211\u4eec\u7701\u53bb\u4e86\u8fd9\u4e9b\u7e41\u7410\u7684\u6b65\u9aa4\uff01\u4e0d\u7528\u518d\u53bb\u914d\u7f6e Spring Session\u3002","title":"2. \u603b\u7ed3"}]}